<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唐小律的发呆空间</title>
  
  <subtitle>Just do it.</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://tangme.github.io/"/>
  <updated>2019-11-28T09:02:04.279Z</updated>
  <id>https://tangme.github.io/</id>
  
  <author>
    <name>唐小律</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue与Electron成长记</title>
    <link href="https://tangme.github.io/2019/11/28/Vue%E4%B8%8EElectron%E6%88%90%E9%95%BF%E8%AE%B0/"/>
    <id>https://tangme.github.io/2019/11/28/Vue与Electron成长记/</id>
    <published>2019-11-28T08:33:10.000Z</published>
    <updated>2019-11-28T09:02:04.279Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vue项目完成后，如果想打包为应用程序，可以使用Electron，从零开始，上手步骤如下：</p></blockquote><ul><li><a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">安装 Vue CLI</a></li><li>通过 <code>vue ui</code> 新建项目</li><li>项目安装 <code>vue-cli-plugin-electron-builder</code> 插件</li><li>进入 <code>vue ui</code> 仪表板<ul><li>进入 <code>任务</code> 菜单<ul><li>选择 <code>electron:build</code><ul><li>设置 <code>变量</code> 后，点击 <code>运行</code> 即可尝鲜打包后的桌面应用</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;vue项目完成后，如果想打包为应用程序，可以使用Electron，从零开始，上手步骤如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cli.vuejs.org/zh/guide/installatio
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>推荐安装Chrome扩展程序</title>
    <link href="https://tangme.github.io/2019/11/26/%E6%8E%A8%E8%8D%90%E5%AE%89%E8%A3%85Chrome%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F/"/>
    <id>https://tangme.github.io/2019/11/26/推荐安装Chrome扩展程序/</id>
    <published>2019-11-26T09:28:50.000Z</published>
    <updated>2019-11-27T02:35:48.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-Resizer"><a href="#Window-Resizer" class="headerlink" title="Window Resizer"></a><a href="https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh" target="_blank" rel="noopener">Window Resizer</a></h1><blockquote><p>快速改变chrome窗口大小，或者视窗大小。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/windowresizer.png" title="Window Resizer"><hr><h1 id="简悦-SimpRead"><a href="#简悦-SimpRead" class="headerlink" title="简悦 - SimpRead"></a><a href="https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll" target="_blank" rel="noopener">简悦 - SimpRead</a></h1><blockquote><p>类似 Safari 的阅读模式。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/simpread.png" title="简悦 - SimpRead"><hr><h1 id="捕捉网页截图-FireShot"><a href="#捕捉网页截图-FireShot" class="headerlink" title="捕捉网页截图 - FireShot"></a><a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg" target="_blank" rel="noopener">捕捉网页截图 - FireShot</a></h1><blockquote><p>捕捉网页截图，编辑并将它们保存为PDF，JPEG，GIF，PNG或BMP。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/fireshot.jpg" title="捕捉网页截图 - FireShot"><hr><h1 id="沙拉查词-聚合词典划词翻译"><a href="#沙拉查词-聚合词典划词翻译" class="headerlink" title="沙拉查词-聚合词典划词翻译"></a><a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg" target="_blank" rel="noopener">沙拉查词-聚合词典划词翻译</a></h1><blockquote><p>划词翻译扩展。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/saladict.jpg" title="沙拉查词-聚合词典划词翻译"><hr><h1 id="AdBlock-广告拦截工具"><a href="#AdBlock-广告拦截工具" class="headerlink" title="AdBlock 广告拦截工具"></a><a href="https://chrome.google.com/webstore/detail/adblock-%E2%80%94-best-ad-blocker/gighmmpiobklfepjocnamgkkbiglidom" target="_blank" rel="noopener">AdBlock 广告拦截工具</a></h1><blockquote><p>在YouTube、Facebook、Twitch和其他你喜爱的网站上拦截广告和弹窗。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/adblock.jpg" title="AdBlock 广告拦截工具"><hr><h1 id="广告终结者"><a href="#广告终结者" class="headerlink" title="广告终结者"></a><a href="https://chrome.google.com/webstore/detail/%E5%B9%BF%E5%91%8A%E7%BB%88%E7%BB%93%E8%80%85/fpdnjdlbdmifoocedhkighhlbchbiikl" target="_blank" rel="noopener">广告终结者</a></h1><blockquote><p>清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/adkiller.jpg" title="广告终结者"><hr><h1 id="WEB前端助手-FeHelper"><a href="#WEB前端助手-FeHelper" class="headerlink" title="WEB前端助手(FeHelper)"></a><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad" target="_blank" rel="noopener">WEB前端助手(FeHelper)</a></h1><blockquote><p>包含多个独立小应用，比如：Json工具、代码美化、代码压缩、二维码、Postman、markdown、网页油猴、便签笔记、信息加密与解密、随机密码生成、Crontab等等。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/fehelper.jpg" title="WEB前端助手(FeHelper)"><hr><h1 id="User-Agent-Switcher-for-Chrome"><a href="#User-Agent-Switcher-for-Chrome" class="headerlink" title="User-Agent Switcher for Chrome"></a><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg" target="_blank" rel="noopener">User-Agent Switcher for Chrome</a></h1><blockquote><p>模拟修改 User-Agent。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/useragent.png" title="User-Agent Switcher for Chrome"><hr><h1 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener">Octotree</a></h1><blockquote><p>Github 目录层级以树形式展示，便捷查看。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/octotree.jpg" title="Octotree"><hr><h1 id="ColorZilla"><a href="#ColorZilla" class="headerlink" title="ColorZilla"></a><a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp" target="_blank" rel="noopener">ColorZilla</a></h1><blockquote><p>网页拾色工具。</p></blockquote><img src="/blog/2019/11/26/推荐安装Chrome扩展程序/colorzilla.jpg" title="ColorZilla"><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-Resizer&quot;&gt;&lt;a href=&quot;#Window-Resizer&quot; class=&quot;headerlink&quot; title=&quot;Window Resizer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://chrome.google.com/webstore/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>建议全局安装的NPM的功能包</title>
    <link href="https://tangme.github.io/2019/11/25/%E5%BB%BA%E8%AE%AE%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E7%9A%84NPM%E7%9A%84%E5%8A%9F%E8%83%BD%E5%8C%85/"/>
    <id>https://tangme.github.io/2019/11/25/建议全局安装的NPM的功能包/</id>
    <published>2019-11-25T09:00:22.000Z</published>
    <updated>2019-11-25T09:14:57.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="live-server"><a href="#live-server" class="headerlink" title="live-server"></a>live-server</h1><blockquote><p>将当前目录，设置为静态服务；之后可快速的通过本机ip或localhost的http形式，访问目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 默认情况下，post请求时，是不会有返回；</span><br><span class="line"> * 如须支持，请在安装 live-server的node_modules目录下</span><br><span class="line"> * 找到 live-server 目录并进入，打开 index.js</span><br><span class="line"> * 修改第 42 行，如下：</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">if (req.method !== &quot;GET&quot; &amp;&amp; req.method !== &quot;POST&quot; &amp;&amp; req.method !== &quot;HEAD&quot;) return next();</span><br></pre></td></tr></table></figure><h1 id="rimraf"><a href="#rimraf" class="headerlink" title="rimraf"></a>rimraf</h1><blockquote><p>删除指定文件或目录；相比系统自带的delete，在删除目录层级很深的情形下，rimraf速度提升不少</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;live-server&quot;&gt;&lt;a href=&quot;#live-server&quot; class=&quot;headerlink&quot; title=&quot;live-server&quot;&gt;&lt;/a&gt;live-server&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将当前目录，设置为静态服务；之后可快速的通
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tangme.github.io/2019/11/13/hello-world/"/>
    <id>https://tangme.github.io/2019/11/13/hello-world/</id>
    <published>2019-11-13T01:39:58.505Z</published>
    <updated>2019-11-13T01:39:58.505Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS-Date-总结</title>
    <link href="https://tangme.github.io/2018/08/01/JS-Date-%E6%80%BB%E7%BB%93/"/>
    <id>https://tangme.github.io/2018/08/01/JS-Date-总结/</id>
    <published>2018-08-01T02:32:08.000Z</published>
    <updated>2019-11-13T01:39:58.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在javascript中对日期的操作还是很多的，比如给日期控件设定个默认值，在vue中根据Date值返回对应毫秒数，使用场景还是很多的，那么个人常用的场景有如下：</p></blockquote><ul><li>给日期控件设定默认值时，需要指定默认的日期时间，例如设定默认日期时间为 <code>2008-10-08 12:12:12</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2008-10-08 12:12:12'</span>);</span><br><span class="line"><span class="keyword">let</span> defaultDateMS = <span class="built_in">Date</span>.parse(defaultDate);</span><br><span class="line"><span class="built_in">console</span>.log(defaultDate);<span class="comment">//Wed Oct 08 2008 12:12:12 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(defaultDateMS);<span class="comment">//1223439132000</span></span><br></pre></td></tr></table></figure><ul><li>默认值为当前的前一天的早上六点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().setHours(<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">defaultDate.setDate(defaultDate.getDate()<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(defaultDate);<span class="comment">//Tue Jul 31 2018 06:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(defaultDate));<span class="comment">//1532988000000</span></span><br></pre></td></tr></table></figure><ul><li>默认值为上月的第一天或最后一天</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lastMonthFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().setHours(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">lastMonthFirstDay.setMonth(lastMonthFirstDay.getMonth()<span class="number">-1</span>);</span><br><span class="line">lastMonthFirstDay.setDate(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lastMonthFirstDay);<span class="comment">//Sun Jul 01 2018 00:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(lastMonthFirstDay));<span class="comment">//1530374400000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lastMonthLastDay = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().setHours(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">lastMonthLastDay.setDate(<span class="number">1</span>);</span><br><span class="line">lastMonthLastDay.setDate(lastMonthLastDay.getDate()<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lastMonthLastDay);<span class="comment">//Tue Jul 31 2018 00:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(lastMonthLastDay));<span class="comment">//1532966400000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在javascript中对日期的操作还是很多的，比如给日期控件设定个默认值，在vue中根据Date值返回对应毫秒数，使用场景还是很多的，那么个人常用的场景有如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;给日期控件设定默认值时，需要指
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://tangme.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-网传问题回顾</title>
    <link href="https://tangme.github.io/2018/06/07/JS-%E7%BD%91%E4%BC%A0%E9%97%AE%E9%A2%98%E5%9B%9E%E9%A1%BE/"/>
    <id>https://tangme.github.io/2018/06/07/JS-网传问题回顾/</id>
    <published>2018-06-07T03:41:31.000Z</published>
    <updated>2019-11-13T01:39:58.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>使用typeof bar ===“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？</li><li>let a = b = c = ‘value’; 方式声明赋值时，有没有潜在风险？</li></ul><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><h2 id="使用-typeof-bar-“object”-来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？"><a href="#使用-typeof-bar-“object”-来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？" class="headerlink" title="使用  typeof  bar === “object” 来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？"></a>使用  typeof  bar === “object” 来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？</h2><p>之所以使用 <code>typeof bar === object&quot;</code> ，是因为大多数情况下我们想检测一个变量是否为一个对象。但是当待检测的变量为<code>null</code> ，或者赋值方式为以下几种方式时，如果没有深入了解数据类型的话，则会有挠头的姿态出现了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> e = <span class="string">'just string'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a,a,a.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b,b,b.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c,c,c.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d,d,d.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e);</span><br></pre></td></tr></table></figure><p>这里当值为 <code>null</code>，或者以 <code>new</code>关键字形式赋值后，输出的值均为 object。这里不深究数据类型，但如果我们想确切的检测一个变量的类型时，可以参考 jQuery的实现方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*此处为非jQuery，但参考jQuery而来的实现方式代码块*/</span></span><br><span class="line"><span class="keyword">const</span> class2type = &#123;&#125;;</span><br><span class="line"><span class="string">"Boolean Number String Function Array Date RegExp Object Error Symbol"</span>.split(<span class="string">" "</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    class2type[<span class="string">"[object "</span>+item+<span class="string">"]"</span>] = item.toLowerCase();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params"> obj </span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( obj == <span class="literal">null</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> obj + <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Support: Android &lt;=2.3 only (functionish RegExp)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span> ?</span><br><span class="line">class2type[ toString.call( obj ) ] || <span class="string">"object"</span> :</span><br><span class="line"><span class="keyword">typeof</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> e = <span class="string">'just string'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(type(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">console</span>.log(type(a));</span><br><span class="line"><span class="built_in">console</span>.log(type(b));</span><br><span class="line"><span class="built_in">console</span>.log(type(c));</span><br><span class="line"><span class="built_in">console</span>.log(type(d));</span><br><span class="line"><span class="built_in">console</span>.log(type(<span class="string">'just string'</span>));</span><br></pre></td></tr></table></figure><h2 id="let-a-b-c-‘value’-方式声明赋值时，有没有潜在风险？"><a href="#let-a-b-c-‘value’-方式声明赋值时，有没有潜在风险？" class="headerlink" title="let a = b = c = ‘value’; 方式声明赋值时，有没有潜在风险？"></a>let a = b = c = ‘value’; 方式声明赋值时，有没有潜在风险？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = c = <span class="number">3</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a defined? "</span> + (<span class="keyword">typeof</span> a !== <span class="string">'undefined'</span>),<span class="keyword">typeof</span> a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b defined? "</span> + (<span class="keyword">typeof</span> b !== <span class="string">'undefined'</span>),<span class="keyword">typeof</span> b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"c defined? "</span> + (<span class="keyword">typeof</span> c !== <span class="string">'undefined'</span>),<span class="keyword">typeof</span> c);</span><br></pre></td></tr></table></figure><p>会打印出什么内容呢？想一想。</p><p>打印的结果是：a 为 undefined，b 和 c 为赋值后的数值。为啥呢？因为我们仅对 变量a 进行了 var 关键字变量声明，而 b 和 c 在未指定变量声明方式时，默认成为了全局变量，在根据赋值从右至左的顺序，c 和 b 相继赋值为 3。</p><p>好了，以上情况仅在非严格模式下出现，在严格模式下，因为 b 和 c 未指定变量声明关键字，会提示 <code>ReferenceError: b c is not defined</code>。</p><p>再来，那在非严格模式下，有没有啥潜在隐患呢？思考下面的代码块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>,c = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a, b, c = <span class="number">3</span>;</span><br><span class="line">    a = b = c;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a + b + c = '</span> + (a + b + c));</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b + c = '</span> + (b + c));</span><br><span class="line"><span class="comment">/*----------------------------------*/</span></span><br><span class="line"><span class="keyword">var</span> bb = <span class="number">1</span>,cc = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> aa = bb = cc = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'aa + bb + cc = '</span>+ (aa + bb + cc));</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bb + cc = '</span>+ (bb + cc));</span><br></pre></td></tr></table></figure><p>可以注意到，两者的区别就在立即执行函数内部 变量的声明和赋值方式，也因此最后输出的值产生了差异。在代码块1中，立即执行函数中，相继声明了 b , c 两个局部变量，之后的赋值也正是赋值给此两个局部变量；而代码块2中，则是对全局变量 bb ，cc赋值，也就造成最终二者不同的输出值了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用typeof bar ===“object”来确定bar是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://tangme.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>VUE中的-methods-computed-watch</title>
    <link href="https://tangme.github.io/2018/06/04/VUE%E4%B8%AD%E7%9A%84-methods-computed-watch/"/>
    <id>https://tangme.github.io/2018/06/04/VUE中的-methods-computed-watch/</id>
    <published>2018-06-04T01:53:10.000Z</published>
    <updated>2019-11-13T01:39:58.504Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://css-tricks.com/methods-computed-and-watchers-in-vue-js/#article-header-id-2" target="_blank" rel="noopener">原文地址</a></p><p><code>methods</code>,<code>computed</code>和<code>watch</code>的易用性与相互之间明确使用场景的定位，是我喜欢使用Vue的原因之一。如不了解以上三者，那么很难发挥Vue的所有潜在功能。在我看来，大多数对此(Vue)框架有困惑的人，同时对以上三者的区别也有着疑惑，那么现在让我们来探究下。</p><p>如果你只须一个结论，或者没有时间通读全文，以下则是总结：</p><ul><li><strong>methods</strong>: 如同词语自身描述的一样。它们是处理对象的方法，通常来说是Vue实例本身，或者是Vue组件。</li><li><strong>computed</strong>: 这些属性第一眼看起来，像是被当作方法使用，但实则不然。在Vue中，我们使用 <code>data</code> 来跟踪特定属性的变化。computed 属性允许我们定义一个属性以 <code>data</code> 同样的方式来使用，但不同是，拥有一套自定的逻辑基于已有的缓存依赖项上。你可以把计算属性认为是 <code>data被逻辑处理后的形式</code>。</li><li><strong>watch</strong>: 其能允许你一览反应系统。我们提供了些钩子来观察存储在 Vue 中的任何属性。如果我们想在每时每刻一有变化时就增加一些功能，或者相应特定的变化，我们可以监听一个属性，然后，赋予些逻辑。这就是说，监听器<code>必须匹配</code>我们所观察的属性。</li></ul><p>如果以上的措辞使你困惑，别着急。接下来我们将深入讲解，以希望能解决你的所有疑惑。如果你已对 JavaScript 很熟悉，methods对你应毫无压力，(当然除了一两个值得留心的小点)。那么可以直接游览 computed 和 watch 章节。</p><h1 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h1><p>Methods 应该是我们在Vue中使用的最多了东西了。They’re aptly named as, in essence, we’re hanging a function off of an object。在给事件响应指令，亦或重构一个函数进行复用的情形下，方法都尤为实用。例如，你能在一个方法中调用另一个方法。也能在生命周期钩子事件中调用方法。使用很是灵巧。<br>以下为一个示例演示：</p><p><a href="//codepen.io/sdras/embed/caf96f7c14dc52323b97dd9845a0bf64?height=300&amp;theme-id=1&amp;slug-hash=caf96f7c14dc52323b97dd9845a0bf64&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Slim%20example%20of%20methods">点击查看在线DEMO</a> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html code --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-css"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"tryme"</span>&gt;</span>Try Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* javascript code*/</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    tryme() &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="built_in">Date</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们也能直接在事件中中执行逻辑指令，如 <code>&lt;button @click=&quot;message = Date()&quot;&gt;Try Me&lt;/button&gt;</code>，在这个小例子中也能顺利执行。但是呢，随着我们开发应用复杂度的增长，更常见的作法是如我们上面例子所展示的，把业务代码抽取出，以获得更好的代码可读性与可维护性。在Vue中使用指令时，也有一些限制，例如：表达式是允许的，但是声明则不行。</p><p>你可能注意到了，我们在Vue实例或组件中调用此方法，并且在此方法中可以访问所有的data数据，此例中为,<code>this.message</code>。在指令中不必非得像调用函数那样调用方法。例如，<code>@click=”methodName()”</code> 可以引用为<code>@click=”methodName”</code>，当然如需传递参数时，则是<code>@click=”methodName(param)”</code>。</p><p>使用指令调用方法很赞的另一个原因是，我们能够使用一些修饰符。下例中一个很有用的修饰符为<code>.prevent</code>，此修饰符将阻止默认提交事件后刷新页面的情形，例子如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>更多信息，请<a href="https://vuejs.org/v2/api/?#v-on" target="_blank" rel="noopener">移步到这</a></p><h1 id="Computed"><a href="#Computed" class="headerlink" title="Computed"></a>Computed</h1><p>计算属性在控制处理已有数据上是非常有用的。当你需要对一个大量数据进行排序又不想每次获取计算后的返回值时，可以了解下计算属性。</p><p>以下为一些适当使用计算属性的条件，但不局限与此：</p><ul><li>在用户输入信息后，需要对已有的大量数据更新，如过滤显示符合输入内容的信息</li><li>从 Vuex 状态管理器中采集信息。</li><li>表单验证</li><li>根据用户所想看的可视化数据信息展示</li></ul><p>对于理解Vue，计算属性是很重要的一部分。计算属性的计算值会根据它们所依赖的数据进行缓存，并只有当符合特定条件时更新。当合理使用计算属性时，其是非常高效和有用的。此外，已经有很多健壮的库和函数提供给我们来处理业务逻辑部分，以降低编程时的代码量。</p><p>计算属性并不像方法那样来的使用，尽管它两看起来很相似。计算属性是：你在一个函数中编写逻辑代码并返回符合逻辑的值，但是 此方法的函数名 将会变成一个属性，就像你在应用使用 <code>data</code>里的属性一样。</p><p>如果我们想在一个大量的英雄名称列表中，通过输入关键字来过滤内容，我们可以采取下面的方式，并且通过这个简单的例子让你对计算属性有个初步的概念。首先，我们的使用存储在 <code>data</code>  中的 <code>names</code> 属性，将列表内容输出在模板中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      names: [</span><br><span class="line">        <span class="string">'Evan You'</span>,</span><br><span class="line">        <span class="string">'John Lindquist'</span>,</span><br><span class="line">        <span class="string">'Jen Looper'</span>,</span><br><span class="line">        <span class="string">'Miriam Suzanne'</span>,</span><br><span class="line">        ...</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Heroes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"name in names"</span>&gt;</span></span><br><span class="line">      &#123;&#123; name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，给这些名称添加一些过滤代码。首先，给文本输入框绑定<code>v-mode</code>，且初始为空字符串值，当然最终我们会使用文本输入框中的值去匹配和过滤后我们的名称列表。给输入文本框绑定的属性值为<code>findName</code>，其与<code>data</code>中的值保持引用关联。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"filtername"</span>&gt;</span>Find your hero:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"findName"</span> <span class="attr">id</span>=<span class="string">"filtername"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    findName: <span class="string">''</span>,</span><br><span class="line">    names: [</span><br><span class="line">      <span class="string">'Evan You'</span>,</span><br><span class="line">      <span class="string">'John Lindquist'</span>,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们创建一个计算属性，其会根据用户在文本输入框中键入的内容，来过滤掉只符合<code>findName</code>属性值相关的名称内容。这里可以看到我使用了正则表达式来弱化了大小写的敏感度，因为作为一个用户，多数情况下是不会键入符合大小写规则的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  filteredNames() &#123;</span><br><span class="line">    <span class="keyword">let</span> filter = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="keyword">this</span>.findName, <span class="string">'i'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.names.filter(<span class="function"><span class="params">el</span> =&gt;</span> el.match(filter))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后我们更新页面模板中的输出项，将：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"name in names"</span>&gt;</span></span><br><span class="line">    &#123;&#123; name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调整为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"name in filteredNames"</span>&gt;</span></span><br><span class="line">    &#123;&#123; name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，我们每次键入任何的信息，都会展示过滤后的内容。可见我们只须键入几行代码，而不须引用其它的类库，就能顺利的实现功能需求。</p><p>我不会告诉你，这帮我省下了多少事件。如果你在使用Vue，而未<a href="https://vuejs.org/v2/guide/computed.html#Computed-Properties" target="_blank" rel="noopener">合理的使用计算属性</a> ，赶紧来试试，定让你开心的飞起来。</p><h1 id="Watchers"><a href="#Watchers" class="headerlink" title="Watchers"></a>Watchers</h1><p>Vue 有着很好的抽象体系设计，不过基本上每个编程人员在使用抽象类时，都会有遇到绕不过的坎而不爽。但也正式基于此痛点，Vue 提供给我们在响应体系中更深度的操作能力，以便我们通过设置钩子来观察任何数据的改变。讲真，这实在太有用了，因为作为一个应用的开发者，大多数时候我们是对数据的变化而响应相关操作的。</p><p>Watchers(侦听器) 允许我们编写更多声明式代码。以简化我们自己编写的代码量。Vue 已在底层实现了此功能，因此我们能在 <code>data</code>，<code>computed</code>    或 <code>props</code> 中跟踪任何数值的改变，来举个例。</p><p>Watchers(侦听器) 在监测属性值改变时，执行特定的业务逻辑代码非常好用(我第一次是从 <a href="https://twitter.com/chrisvfritz" target="_blank" rel="noopener">Chris Fritz</a> 听到这种操作方式的，但是他说他也是从别处体验到的☺️)。多数情况下，通过检测属性的改变来执行业务逻辑，这也正是 与 计算属性不同的地方。</p><p>现在来跑一个简单的例子，感受下 watch的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>, </span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      counter: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    counter() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'The counter has changed!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如上面代码所示，我们在<code>data</code>中设置了<code>counter</code>，并将此属性名称作为方法名称，在<code>watch</code>中配置<code>counter</code>，以便我们能监测设置的<code>counter</code>属性值，最后我们可以看到，一旦<code>counter</code>数值发生改变，控制台都有输出。</p><h1 id="Transitioning-State-With-Watchers"><a href="#Transitioning-State-With-Watchers" class="headerlink" title="Transitioning State With Watchers"></a>Transitioning State With Watchers</h1><p>如果监测的状态标识符很简单，那么可以使用watch(侦听器)来实现一个根据状态值改变的过度效果。以下是一个使用Vue来完成的柱状图表。随着数值的变化，watch(侦听器)将通过过度效果来更新图表。</p><p>SVG 如下面的例子一样很好使用，因为其以 数据 来构建。</p><p><a href="//codepen.io/sdras/embed/OWZRZL?height=578&amp;theme-id=1&amp;slug-hash=OWZRZL&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Chart%20made%20with%20Vue%2C%20Transitioning%20State">点击查看DEMO</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  selected: <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tweenedData = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> obj = <span class="built_in">Object</span>.values(tweenedData);</span><br><span class="line">      obj.pop();</span><br><span class="line">      <span class="keyword">this</span>.targetVal = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tweenSourceData = &#123; <span class="attr">onUpdate</span>: update, <span class="attr">onUpdateScope</span>: <span class="keyword">this</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldValue.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> key = i.toString()</span><br><span class="line">      tweenedData[key] = oldValue[i]</span><br><span class="line">      tweenSourceData[key] = newValue[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TweenMax.to(tweenedData, <span class="number">1</span>, tweenSourceData)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里干了些啥呢？</p><ul><li>首先我们创建了一个对象，其会通过动画库来更新。</li><li>然后这里可以看到一个<code>update</code>方法，</li><li>接下来创建一个对象来接收</li><li>接着创建一个for循环，将当前下编转换为字符串类型</li><li>但我们只对指定的键值执行此操作</li></ul><p>我们也能在侦听器中使用动画来实现一个时差刻度盘。因为我时不时的会外出溜达，并且我的小伙伴也分散在不同的地方，所以需求之一就是能保证一个我们各自的当地时间都能在线，并且体现出是白天还是夜晚。</p><p><a href="//codepen.io/sdras/embed/RZGqxR?height=700&amp;theme-id=1&amp;slug-hash=RZGqxR&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Vue%20Time%20Comparison">点击查看DEMO</a></p><p>这里我们监听 选中的属性值，根据当前时间去触发不同的方法来改变 各个区域时间，其会通过色调，饱和度，和其它过度效果来展现。在之前的实现方式中，我们是通过下拉事件，而现在是在侦听器的方法中了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  checked() &#123;</span><br><span class="line">    <span class="keyword">let</span> period = <span class="keyword">this</span>.timeVal.slice(<span class="number">-2</span>),</span><br><span class="line">      hr = <span class="keyword">this</span>.timeVal.slice(<span class="number">0</span>, <span class="keyword">this</span>.timeVal.indexOf(<span class="string">':'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dayhr = <span class="number">12</span>,</span><br><span class="line">      rpos = <span class="number">115</span>,</span><br><span class="line">      rneg = <span class="number">-118</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((period === <span class="string">'AM'</span> &amp;&amp; hr != <span class="number">12</span>) || (period === <span class="string">'PM'</span> &amp;&amp; hr == <span class="number">12</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.spin(<span class="string">`<span class="subst">$&#123;rneg - (rneg <span class="regexp">/ dayhr) * hr&#125;`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">      this.animTime(1 - hr /</span> dayhr, period)</span></span></span><br><span class="line"><span class="string"><span class="subst">    &#125;</span> else &#123;</span></span><br><span class="line"><span class="string">      this.spin(`</span>$&#123;(rpos / dayhr) * hr&#125;<span class="string">`)</span></span><br><span class="line"><span class="string">      this.animTime(hr / dayhr, period)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure><p>关于watchers(侦听器)还有很多其它有趣的使用方式，比如：</p><p>从输入，到异步更新，再到动画，watchers(侦听器)在更新方面能做的事实在是太多了。如果你对 Vue是如何处理响应工作感到好奇， <a href="https://vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">这部分指南</a>会十分有帮助。如果你想更加全面的了解 响应，我十分推荐  <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="noopener">Andre Staltz’ post</a>  和 Mike Bostock’s <a href="https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0" target="_blank" rel="noopener">A Better Way to Code</a>的响应章节部分。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>希望通过以上各部分的讲解，有助于我们正确的使用三者，以及更有效的使用Vue来加速开发我们的应用。有报告指出，我们花费70%的时间阅读代码，30%的时间编写代码，作为个人而言，身为维护者的我，喜欢这种感觉，通过查看代码库，开启了我之前从未了解过的编写方法，并且马上了解作者在<code>methods</code>，<code>computed</code>，<code>watchers</code>的区别用意。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://css-tricks.com/methods-computed-and-watchers-in-vue-js/#article-header-id-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="vue" scheme="https://tangme.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JS-Array-常用方法</title>
    <link href="https://tangme.github.io/2018/04/27/JS-Array-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://tangme.github.io/2018/04/27/JS-Array-常用方法/</id>
    <published>2018-04-27T02:57:08.000Z</published>
    <updated>2019-11-13T01:39:58.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><h3 id="Array-isArray-obj"><a href="#Array-isArray-obj" class="headerlink" title="Array.isArray(obj);"></a>Array.isArray(obj);</h3><blockquote><p>检测给定值是否为数组； 是则返回 true | 否则返回 false</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(Array.isArray([]));/* true */</span><br><span class="line">console.log(Array.isArray(new Array(1,2)));/* true */</span><br><span class="line">console.log(Array.isArray(&#123;&#125;));/* false */</span><br></pre></td></tr></table></figure><h3 id="对操作数组本身进行修改的方法"><a href="#对操作数组本身进行修改的方法" class="headerlink" title="对操作数组本身进行修改的方法"></a>对操作数组本身进行修改的方法</h3><ul><li>pop <em>删除并返回数组的最后一个元素</em></li><li>push <em>向末尾添加一个或多个元素，并返回新的长度</em></li><li>shift <em>删除并返回数据的第一个元素</em></li><li>splice <em>删除元素，并向数组添加元素</em></li><li>unshift <em>向开头添加一个或多个元素，并返回新的长度</em></li><li>reverse <em>颠倒数组中元素的顺序</em></li><li>sort <em>排序</em></li><li>fill <em>用指定值来填充数组</em></li></ul><h3 id="对操作数组本身-无影响"><a href="#对操作数组本身-无影响" class="headerlink" title="对操作数组本身 无影响"></a>对操作数组本身 无影响</h3><ul><li>concat <em>连接两个或多个数组，并返回结果</em></li><li>join <em>将数组的所有元素放入一个字符串中，元素按指定的分隔符进行连接</em></li><li>slice <em>从已有的数组返回选定的元素</em></li><li>map <em>返回调用处理方法后的数组值</em></li><li>forEach <em>遍历数组所有值，并将值逐一传给回调函数</em></li><li>filter <em>返回一个新数组，新数组中为符合条件的所有值</em></li><li>find <em>返回符合条件的第一个值</em></li><li>findIndex <em>返回符合条件第一个值得下标索引</em></li><li>indexOf <em>返回指定值在数组中首次出现的位置</em></li><li>includes <em>数组是否包含指定值</em></li><li>every <em>遍历数组，检测是否所有值都符合给定的函数判断；全部符合返回true</em></li><li>some <em>遍历数组，检测是否有符合给定函数的判断；有一个符合则返回true</em></li></ul><h2 id="对数组本身进行修改的方法"><a href="#对数组本身进行修改的方法" class="headerlink" title="对数组本身进行修改的方法"></a>对数组本身进行修改的方法</h2><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><blockquote><p>删除数组中的最后一个元素，并返回删除的元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,&apos;a&apos;,&#123;b:2&#125;];</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 1, 2, &apos;a&apos;, &#123; b: 2 &#125; ] */</span><br><span class="line"></span><br><span class="line">console.log(arr.pop());</span><br><span class="line">/* &#123; b: 2 &#125; */</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 1, 2, &apos;a&apos; ] */</span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><blockquote><p>向数组末尾添加一个或多个元素，并返回新的长度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2];</span><br><span class="line">let arrb = [&apos;a&apos;,&apos;b&apos;];</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 1, 2 ] */</span><br><span class="line"></span><br><span class="line">console.log(arr.push(...arrb));</span><br><span class="line">/* length:4 */</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 1, 2, &apos;a&apos;, &apos;b&apos; ] */</span><br><span class="line"></span><br><span class="line">arrb[0]=&apos;c&apos;;</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 1, 2, &apos;a&apos;, &apos;b&apos; ] */</span><br><span class="line"></span><br><span class="line">console.log(arrb);</span><br><span class="line">/* [ &apos;c&apos;, &apos;b&apos; ] */</span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><blockquote><p>删除数组中的第一个元素，并返回删除的元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [&#123;a:1&#125;,2,3];</span><br><span class="line">console.log(arr.shift());</span><br><span class="line">/* &#123;a:1&#125; */</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">/* [2,3] */</span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><blockquote><p>向数组的头部增加一个或多个元素，并返回数组新的长度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr = [&#123;a:1&#125;,2,3];</span><br><span class="line">let arrb = [&apos;c&apos;,&#123;name:&apos;dan&apos;&#125;];</span><br><span class="line">console.log(arr.unshift(...arrb));</span><br><span class="line">/* length:5 */</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ &apos;c&apos;, &#123; name: &apos;dan&apos; &#125;, &#123; a: 1 &#125;, 2, 3 ] */</span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><blockquote><p>向数组指定位置删除指定个数元素 或 添加元素，并返回删除元素的数组</p></blockquote><ul><li>index : 操作的起始位置</li><li>howmany : 删除的个数 0:不删除 | 不传:删除至数组末尾 </li><li>newItem,*,newItems : 新增的元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5];</span><br><span class="line">/*从数组第二位新增两个元素,注:纯新增必须设置第二个参数为 0*/</span><br><span class="line">arr.splice(2,0,&#123;a:1&#125;,234);</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 1, 2, &#123; a: 1 &#125;, 234, 3, 4, 5 ] */</span><br></pre></td></tr></table></figure></li></ul><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><blockquote><p>颠倒数组的前后顺序，并返回颠倒排序后的数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5];</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 1, 2, 3, 4, 5 ] */</span><br><span class="line"></span><br><span class="line">arr.reverse();</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 5, 4, 3, 2, 1 ] */</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote><p>对数组进行排序 | 无参时 按字符编码顺序升序排序 | 有参：如下</p><ul><li>before 前一个元素</li><li>next 后一个元素<br>升序条件如下</li><li>如果 before 小于 next，在排序后的数组中 before 应该出现在 next 之前，则返回一个小于 0 的值</li><li>如果 before 等于 next，返回 0</li><li>如果 before 大于 next，在排序后的数组中 before 应该出现在 next 之后，则返回一个大于 0 的值<br>降序条件如下</li><li>如果 before 小于 next，在排序后的数组中 before 应该出现在 next 之后，则返回一个大于 0 的值</li><li>如果 before 等于 next，返回 0</li><li>如果 before 大于 next，在排序后的数组中 before 应该出现在 next 之前，则返回一个小于 0 的值 </li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">let arr = [&#123;name:&apos;a&apos;,age:23&#125;,&#123;name:&apos;g&apos;,age:32&#125;,&#123;name:&apos;d&apos;,age:2&#125;,&#123;name:&apos;z&apos;,age:99&#125;,&#123;name:&apos;j&apos;,age:13&#125;,&#123;name:&apos;e&apos;,age:78&#125;,&#123;name:&apos;p&apos;,age:34&#125;,&#123;name:&apos;e&apos;,age:33&#125;];</span><br><span class="line">function sortBy(attr,ascORdesc = &apos;asc&apos;)&#123;</span><br><span class="line">let ascORdescFlag = (ascORdesc== &apos;asc&apos;?1:-1);</span><br><span class="line">return function sort(before,next)&#123;</span><br><span class="line">before = before[attr];</span><br><span class="line">next = next[attr];</span><br><span class="line">if(before&lt;next)&#123;</span><br><span class="line">return -1*ascORdescFlag;</span><br><span class="line">&#125;</span><br><span class="line">if(before&gt;next)&#123;</span><br><span class="line">return 1*ascORdescFlag;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">arr.sort(sortBy(&apos;age&apos;,22));</span><br><span class="line">console.log(arr);</span><br><span class="line">/*</span><br><span class="line">[ &#123; name: &apos;z&apos;, age: 99 &#125;,</span><br><span class="line"> &#123; name: &apos;e&apos;, age: 78 &#125;,</span><br><span class="line"> &#123; name: &apos;p&apos;, age: 34 &#125;,</span><br><span class="line"> &#123; name: &apos;e&apos;, age: 33 &#125;,</span><br><span class="line"> &#123; name: &apos;g&apos;, age: 32 &#125;,</span><br><span class="line"> &#123; name: &apos;a&apos;, age: 23 &#125;,</span><br><span class="line"> &#123; name: &apos;j&apos;, age: 13 &#125;,</span><br><span class="line"> &#123; name: &apos;d&apos;, age: 2 &#125; ]</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">arr.sort(sortBy(&apos;name&apos;));</span><br><span class="line">console.log(arr);</span><br><span class="line">/*</span><br><span class="line">[ &#123; name: &apos;a&apos;, age: 23 &#125;,</span><br><span class="line"> &#123; name: &apos;d&apos;, age: 2 &#125;,</span><br><span class="line"> &#123; name: &apos;e&apos;, age: 78 &#125;,</span><br><span class="line"> &#123; name: &apos;e&apos;, age: 33 &#125;,</span><br><span class="line"> &#123; name: &apos;g&apos;, age: 32 &#125;,</span><br><span class="line"> &#123; name: &apos;j&apos;, age: 13 &#125;,</span><br><span class="line"> &#123; name: &apos;p&apos;, age: 34 &#125;,</span><br><span class="line"> &#123; name: &apos;z&apos;, age: 99 &#125; ]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><blockquote><p>将指定的值 替换到 数组中的指定位置</p><ul><li>value: 必填|填充的值</li><li>start: 可选|填充的起始位置</li><li>end: 可选|填充的结束位置</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let arr = [&apos;d&apos;,&apos;b&apos;,&apos;c&apos;,1,3];</span><br><span class="line">arr.fill(&apos;hello&apos;,3,5);</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ &apos;d&apos;, &apos;b&apos;, &apos;c&apos;, &apos;hello&apos;, &apos;hello&apos; ] */</span><br><span class="line"></span><br><span class="line">arr.fill(&apos;world&apos;,2);</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ &apos;d&apos;, &apos;b&apos;, &apos;world&apos;, &apos;world&apos;, &apos;world&apos; ] */</span><br><span class="line"></span><br><span class="line">arr.fill(&apos;hello world&apos;);</span><br><span class="line">console.log(arr);</span><br><span class="line">/* </span><br><span class="line">[ &apos;hello world&apos;,</span><br><span class="line"> &apos;hello world&apos;,</span><br><span class="line"> &apos;hello world&apos;,</span><br><span class="line"> &apos;hello world&apos;,</span><br><span class="line"> &apos;hello world&apos; ]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="对数组本身无影响的方法"><a href="#对数组本身无影响的方法" class="headerlink" title="对数组本身无影响的方法"></a>对数组本身无影响的方法</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><blockquote><p>连接两个或多个数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,&#123;age:28&#125;,3],arrb=[&apos;a&apos;,&apos;b&apos;],arrc = [];</span><br><span class="line">arrc = arrc.concat(arr,arrb);</span><br><span class="line">console.log(arrc);</span><br><span class="line">/* [ 1, &#123; age: 28 &#125;, 3, &apos;a&apos;, &apos;b&apos; ] */</span><br><span class="line"></span><br><span class="line">arr[0] = &apos;hello world&apos;;</span><br><span class="line">arr[1].age = 18;</span><br><span class="line">console.log(arrc);</span><br><span class="line">/*</span><br><span class="line">注意: 原数组中，引用类型的值修改会造成返回的新数组值修改 [引用的为同一地址]</span><br><span class="line">[ 1, &#123; age: 18 &#125;, 3, &apos;a&apos;, &apos;b&apos; ] </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote><p>将数组中得所有元素连接成字符串</p><ul><li>separator 连接各元素的分隔符；若不指定，默认为逗号连接</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let arr = [-1,&apos;a&apos;,[&apos;b&apos;,&apos;c&apos;,[&apos;d&apos;,&apos;e&apos;]],&apos;123a&apos;];</span><br><span class="line">console.log(arr.join());</span><br><span class="line">/* -1,a,b,c,d,e,123a */</span><br><span class="line"></span><br><span class="line">console.log(arr.join(&apos;&apos;));</span><br><span class="line">/* -1ab,c,d,e123a */</span><br><span class="line"></span><br><span class="line">/*打平嵌套数组</span><br><span class="line">* 注：处理后，如元素组中的元素 为String类型的数字，处理后为Number类型</span><br><span class="line">*/</span><br><span class="line">function unwind(array)&#123;</span><br><span class="line">return arr.join(&apos;,&apos;).split(&apos;,&apos;).map((item)=&gt;&#123;return Number(item)?Number(item):item&#125;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(unwind(arr));</span><br><span class="line">/* [ -1, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, 123 ] */</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><blockquote><p>返回数组中指定的元素</p><ul><li>start | [起始下标] -1 为数组最后的元素</li><li>end   | [结束下标]</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,&apos;b&apos;,&#123;c:&apos;hello&apos;&#125;,&apos;d&apos;];</span><br><span class="line">let arrb = arr.slice(-1),arrc = arr.slice();</span><br><span class="line">console.log(arrb);</span><br><span class="line">/* [ &apos;d&apos; ] */</span><br><span class="line"></span><br><span class="line">console.log(arrc);</span><br><span class="line">/* [ 1, &apos;b&apos;, &#123; c: &apos;hello&apos; &#125;, &apos;d&apos; ] */</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>返回一个新数组,新元素为 原元素调用函数处理后的值</p><ul><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,3,&apos;4&apos;,&apos;b&apos;,&#123;c:&apos;hello&apos;&#125;];</span><br><span class="line">let arrb = arr.map(function(item)&#123;</span><br><span class="line">return item*2;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr);</span><br><span class="line">/* [ 1, 3, &apos;4&apos;, &apos;b&apos;, &#123; c: &apos;hello&apos; &#125; ] */</span><br><span class="line"></span><br><span class="line">console.log(arrb);</span><br><span class="line">/* [ 2, 6, 8, NaN, NaN ] */</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote><p>遍历数组的每个元素，并将元素传递给回调函数</p><ul><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">*数组去重</span><br><span class="line">*此方法仅可用于基础类型的值 去重，引用类型无法去除</span><br><span class="line">*/</span><br><span class="line">function uniq(array)&#123;</span><br><span class="line">let returnArr = [],tmpMap = &#123;&#125;;</span><br><span class="line">array.forEach((item)=&gt;&#123;</span><br><span class="line">if(!tmpMap[item])&#123;</span><br><span class="line">returnArr.push(item);</span><br><span class="line">tmpMap[item] = 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">return returnArr;</span><br><span class="line">&#125;</span><br><span class="line">let testArr = [1,1,2,2,2,3,3,3,3,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&#123;d:&apos;123&apos;&#125;,&#123;d:&apos;456&apos;&#125;];</span><br><span class="line">console.log(uniq(testArr));</span><br><span class="line">/* [ 1, 2, 3, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &#123; d: &apos;123&apos; &#125; ] */</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote><p>返回一个新数组，新数组中的元素为符合判断条件的元素</p><ul><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 数组去重 </span><br><span class="line">*此方法仅可用于基础类型的值 去重，引用类型无法去除</span><br><span class="line">*/</span><br><span class="line">let testArr = [1,1,2,2,2,3,3,3,3,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</span><br><span class="line">let reArr = testArr.filter((item,i,arr)=&gt;&#123;</span><br><span class="line">return arr.indexOf(item)===i;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">/* [ 1, 2, 3, &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ] */</span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>返回符合条件的 第一个值</p><ul><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr = [&#123;age:11&#125;,&#123;age:22&#125;,&#123;age:33&#125;];</span><br><span class="line">let reArr = testArr.find((item,i,arr)=&gt;&#123;</span><br><span class="line">return item.age&gt;15;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">/* &#123; age: 22 &#125; */</span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><blockquote><p>返回符合条件的 第一个值的下标索引</p><ul><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr = [&#123;age:11&#125;,&#123;age:22&#125;,&#123;age:33&#125;];</span><br><span class="line">let reArr = testArr.findIndex((item,i,arr)=&gt;&#123;</span><br><span class="line">return item.age&gt;15;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">/* 1 */</span><br></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><blockquote><p>返回指定元素值的第一个下标索引</p><ul><li>item | 待检索的值</li><li>start | 检索的起始位置</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 数组去重 </span><br><span class="line">*此方法仅可用于基础类型的值 去重，引用类型无法去除</span><br><span class="line">*/</span><br><span class="line">let testArr = [1,1,2,2,2,3,3,3,3,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</span><br><span class="line">let reArr = testArr.filter((item,i,arr)=&gt;&#123;</span><br><span class="line">return arr.indexOf(item)===i;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">/* [ 1, 2, 3, &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ] */</span><br></pre></td></tr></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><blockquote><p>返回指定元素值的第一个下标索引</p><ul><li>item | 待检索的值</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let testArr = [1,1,2,2,2,3,3,3,3,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</span><br><span class="line">console.log(testArr.lastIndexOf(&apos;a&apos;));</span><br><span class="line">/* 10 */</span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><blockquote><p>检测数组中是否包含指定元素，有则true | 否则false</p><ul><li>item | 待检测的值</li><li>start | 检索的起始位置</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let testArr = [11,22,33];</span><br><span class="line">console.log(testArr.includes(22));</span><br><span class="line">/* true */</span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><blockquote><p>检测是否数组中的元素都符合指定的条件，都符合则返回true | 一旦有一个不符合返回 false</p><ul><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr = [&#123;age:11&#125;,&#123;age:22&#125;,&#123;age:33&#125;];</span><br><span class="line">let reArr = testArr.every((item,i,arr)=&gt;&#123;</span><br><span class="line">return item.age&gt;15;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">/* false */</span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><blockquote><p>检测数组中是否有一个满足条件的元素，只要有一个则返回true | 一个都没有则返回 false</p><ul><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr = [&#123;age:11&#125;,&#123;age:22&#125;,&#123;age:33&#125;];</span><br><span class="line">let reArr = testArr.some((item,i,arr)=&gt;&#123;</span><br><span class="line">return item.age&gt;15;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">/* true */</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote><p>将数组中的每个值从左到右开始缩减，经函数处理后，最终返回一个值</p><ul><li>function <ul><li>total             初始值, 或者计算结束后的返回值 | 必须</li><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></li><li>可选。传递给函数的初始值</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*打平嵌套数组</span><br><span class="line">* 使用条件仅为 待打平的数组为 二维数组</span><br><span class="line">*/</span><br><span class="line">let testArr = [1,[&apos;a&apos;,&apos;c&apos;],3];</span><br><span class="line">console.log(testArr.reduce((r,item)=&gt;r.concat(item),[]));</span><br><span class="line">/* [ 1, &apos;a&apos;, &apos;c&apos;, 3 ] */</span><br><span class="line">/* 注：不提供默认值时：初始的默认值为 首位元素的值*/</span><br></pre></td></tr></table></figure><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h3><blockquote><p>将数组中的每个值从右到左开始缩减，经函数处理后，最终返回一个值</p><ul><li>function <ul><li>total             初始值, 或者计算结束后的返回值 | 必须</li><li>currentValue：    当前值[原数组]    |  必须</li><li>index：           当前值的下标索引  |  可选</li><li>arr：             原数组对象        |  可选</li></ul></li><li>可选。传递给函数的初始值</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr = [1,2,3,4,5,6];</span><br><span class="line">console.log(testArr.reduce((total,item)=&gt;&#123;</span><br><span class="line">return total-item;</span><br><span class="line">&#125;));</span><br><span class="line">/* 注：不提供默认值时：初始的默认值为 末位元素的值*/</span><br><span class="line">/* -19 */</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;静态方法&quot;&gt;&lt;a href=&quot;#静态方法&quot; class=&quot;headerlink&quot; title=&quot;静态方法&quot;&gt;&lt;/a&gt;静态方法&lt;/h2&gt;&lt;h3 id=&quot;Array-isArray-obj&quot;&gt;&lt;a href=&quot;#Array-isArray-obj&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://tangme.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-总结</title>
    <link href="https://tangme.github.io/2018/04/27/JS-%E6%80%BB%E7%BB%93/"/>
    <id>https://tangme.github.io/2018/04/27/JS-总结/</id>
    <published>2018-04-27T02:53:39.000Z</published>
    <updated>2019-11-13T01:39:58.504Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/blog/2018/04/27/JS-Array-常用方法/" title="JS-Array-常用方法">JS-Array-常用方法</a>  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2018/04/27/JS-Array-常用方法/&quot; title=&quot;JS-Array-常用方法&quot;&gt;JS-Array-常用方法&lt;/a&gt;  
&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="javascript" scheme="https://tangme.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://tangme.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSSLint-目录</title>
    <link href="https://tangme.github.io/2018/04/25/CSSLint-%E7%9B%AE%E5%BD%95/"/>
    <id>https://tangme.github.io/2018/04/25/CSSLint-目录/</id>
    <published>2018-04-25T08:19:10.000Z</published>
    <updated>2019-11-13T01:39:58.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="csslint-语法建议规则"><a href="#csslint-语法建议规则" class="headerlink" title="csslint 语法建议规则"></a>csslint 语法建议规则</h1><blockquote><p>规则 根据字母升序排列</p></blockquote><ul><li>                            <a href="https://github.com/CSSLint/csslint/wiki/Disallow-adjoining-classes" target="_blank" rel="noopener">原址</a></li><li>                                       <a href="https://github.com/CSSLint/csslint/wiki/Beware-of-box-model-size" target="_blank" rel="noopener">原址</a></li><li>                                       <a href="https://github.com/CSSLint/csslint/wiki/Disallow-box-sizing" target="_blank" rel="noopener">原址</a></li><li>                        <a href="https://github.com/CSSLint/csslint/wiki/Bulletproof-font-face" target="_blank" rel="noopener">原址</a></li><li>            <a href="https://github.com/CSSLint/csslint/wiki/Require-compatible-vendor-prefixes" target="_blank" rel="noopener">原址</a></li><li>                                     <a href="https://github.com/CSSLint/csslint/wiki/Disallow-empty-rules" target="_blank" rel="noopener">原址</a></li><li>              <a href="https://github.com/CSSLint/csslint/wiki/Require-properties-appropriate-for-display" target="_blank" rel="noopener">原址</a></li><li>       <a href="https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-background-images" target="_blank" rel="noopener">原址</a></li><li>                      <a href="https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-properties" target="_blank" rel="noopener">原址</a></li><li>                               <a href="https://github.com/CSSLint/csslint/wiki/Require-fallback-colors" target="_blank" rel="noopener">原址</a></li><li>                                            <a href="https://github.com/CSSLint/csslint/wiki/Disallow-too-many-floats" target="_blank" rel="noopener">原址</a></li><li>                                     <a href="https://github.com/CSSLint/csslint/wiki/Don%27t-use-too-many-web-fonts" target="_blank" rel="noopener">原址</a></li><li>                                     <a href="https://github.com/CSSLint/csslint/wiki/Don%27t-use-too-many-font-size-declarations" target="_blank" rel="noopener">原址</a></li><li>                                     <a href="https://github.com/CSSLint/csslint/wiki/Require-all-gradient-definitions" target="_blank" rel="noopener">原址</a></li><li>                                                <a href="https://github.com/CSSLint/csslint/wiki/Disallow-IDs-in-selectors" target="_blank" rel="noopener">原址</a></li><li>                                         <a href="https://github.com/CSSLint/csslint/wiki/Disallow-%40import" target="_blank" rel="noopener">原址</a></li><li>                                    <a href="https://github.com/CSSLint/csslint/wiki/Disallow-%21important" target="_blank" rel="noopener">原址</a></li><li>                       <a href="https://github.com/CSSLint/csslint/wiki/Require-use-of-known-properties" target="_blank" rel="noopener">原址</a></li><li>                               <a href="https://github.com/CSSLint/csslint/wiki/Disallow-outline%3Anone" target="_blank" rel="noopener">原址</a></li><li>               <a href="https://github.com/CSSLint/csslint/wiki/Disallow-overqualified-elements" target="_blank" rel="noopener">原址</a></li><li>                      <a href="https://github.com/CSSLint/csslint/wiki/Disallow-qualified-headings" target="_blank" rel="noopener">原址</a></li><li>                           <a href="https://github.com/CSSLint/csslint/wiki/Disallow-selectors-that-look-like-regular-expressions" target="_blank" rel="noopener">原址</a></li><li>                                   <a href="https://github.com/CSSLint/csslint/wiki/Require-shorthand-properties" target="_blank" rel="noopener">原址</a></li><li>                      <a href="https://github.com/CSSLint/csslint/wiki/Disallow-star-hack" target="_blank" rel="noopener">原址</a></li><li>                                  <a href="https://github.com/CSSLint/csslint/wiki/Disallow-negative-text-indent" target="_blank" rel="noopener">原址</a></li><li>           <a href="https://github.com/CSSLint/csslint/wiki/Disallow-underscore-hack" target="_blank" rel="noopener">原址</a></li><li>                         <a href="https://github.com/CSSLint/csslint/wiki/Headings-should-only-be-defined-once" target="_blank" rel="noopener">原址</a></li><li>                        <a href="https://github.com/CSSLint/csslint/wiki/Disallow-universal-selector" target="_blank" rel="noopener">原址</a></li><li>                    <a href="https://github.com/CSSLint/csslint/wiki/Disallow-unqualified-attribute-selectors" target="_blank" rel="noopener">原址</a></li><li>                                 <a href="https://github.com/CSSLint/csslint/wiki/Require-standard-property-with-vendor-prefix" target="_blank" rel="noopener">原址</a></li><li>                                     <a href="https://github.com/CSSLint/csslint/wiki/Disallow-units-for-zero-values" target="_blank" rel="noopener">原址</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;csslint-语法建议规则&quot;&gt;&lt;a href=&quot;#csslint-语法建议规则&quot; class=&quot;headerlink&quot; title=&quot;csslint 语法建议规则&quot;&gt;&lt;/a&gt;csslint 语法建议规则&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;规则 根据字母升序
      
    
    </summary>
    
      <category term="译文" scheme="https://tangme.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="CSS" scheme="https://tangme.github.io/tags/CSS/"/>
    
      <category term="目录" scheme="https://tangme.github.io/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
</feed>
