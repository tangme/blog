<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx</title>
      <link href="/blog/2021/10/27/nginx/"/>
      <url>/blog/2021/10/27/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="本地-https-请求转-http"><a href="#本地-https-请求转-http" class="headerlink" title="本地 https 请求转 http"></a>本地 https 请求转 http</h1><p>1、生成证书</p><blockquote><p>openssl genrsa -out privkey.pem</p></blockquote><blockquote><p>openssl req -new -x509 -key privkey.pem -out server.pem -days 365</p></blockquote><p><a href="https://www.openssl.org/docs/man1.1.1/man1/genrsa.html">openssl genrsa 示意</a><br><a href="https://www.openssl.org/docs/man1.1.1/man1/req.html">openssl req 示意</a></p><p>证书信息可以随便填或者留空，只有 Common Name 要根据你的域名填写。如 xxx.com，或使用*.xxx.com 匹配二级域名。</p><p>2、nginx 设置配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  tanglv.com;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;tanglv.com:8016; # 将 http:&#x2F;&#x2F;tanglv.com:8080 转发到 http:&#x2F;&#x2F;tanglv.com:8016</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name  tanglv.com;</span><br><span class="line"></span><br><span class="line">        ssl_certificate      .&#x2F;tanglvdata&#x2F;server.pem; # 第一步生成的证书文件位置</span><br><span class="line">        ssl_certificate_key  .&#x2F;tanglvdata&#x2F;privkey.pem; # 第一步生成的证书文件位置</span><br><span class="line"></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;tanglv.com:8080;  #将 https:&#x2F;&#x2F;tanglv.com 转发到 http:&#x2F;&#x2F;tanglv.com:8080</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/magotzis/p/9456695.html">参考配置 nginx</a></p><p>3、host 文件配置域名 ip 信息</p><p>4、<a href="https://nginx.org/en/docs/beginners_guide.html">启动 ngnix</a> <a href="https://zhuanlan.zhihu.com/p/34362747">参考</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 笔记</title>
      <link href="/blog/2021/08/26/VSCode%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2021/08/26/VSCode%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="扫盲科普"><a href="#扫盲科普" class="headerlink" title="扫盲科普"></a>扫盲科普</h2><p><strong>User</strong> 用户设置，适用于打开的所有文件夹及文件</p><p><strong>Workspace</strong> 工作空间设置，仅适用于当前文件夹，设置会覆盖用户设置</p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a></h3><p>括号美化</p><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></h3><p>js 语法校验</p><h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></h3><p>路径自动提示</p><h3 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></h3><p>代码格式化</p><h3 id="Formatting-Toggle"><a href="#Formatting-Toggle" class="headerlink" title="Formatting Toggle"></a><a href="https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle">Formatting Toggle</a></h3><p>格式化开关</p><h3 id="koroFileHeader"><a href="#koroFileHeader" class="headerlink" title="koroFileHeader"></a><a href="https://marketplace.visualstudio.com/items?itemName=OBKoro1.korofileheader">koroFileHeader</a></h3><p>注释生成</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 类库推荐</title>
      <link href="/blog/2021/07/15/JS%E7%B1%BB%E5%BA%93%E6%8E%A8%E8%8D%90/"/>
      <url>/blog/2021/07/15/JS%E7%B1%BB%E5%BA%93%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h1 id="fabric-js"><a href="#fabric-js" class="headerlink" title="fabric.js"></a><a href="https://github.com/fabricjs/fabric.js">fabric.js</a></h1><blockquote><p><strong>Fabric.js</strong> is a framework that makes it easy to work with HTML5 canvas element. It is an <strong>interactive object model</strong> on top of canvas element. It is also an <strong>SVG-to-canvas parser</strong>.</p><p><a href="https://tangme.github.io/master-photo-doc/#/">master-photo</a> 是 fabric 处理图片的案例</p></blockquote><h1 id="handsontable"><a href="#handsontable" class="headerlink" title="handsontable"></a><a href="https://handsontable.com/">handsontable</a></h1><blockquote><p><strong>JavaScript data grid that looks and feels like a spreadsheet.</strong> Minimalistic, Excel-like grid component for web apps. Available for pure <a href="https://handsontable.com/docs/tutorial-quick-start.html">JavaScript</a>, <a href="https://handsontable.com/docs/react">React</a>, <a href="https://handsontable.com/docs/vue">Vue</a>, and <a href="https://handsontable.com/docs/angular">Angular</a>.</p><p>表格处理的利器</p></blockquote><h1 id="docsify"><a href="#docsify" class="headerlink" title="docsify"></a><a href="https://docsify.js.org/#/">docsify</a></h1><blockquote><p>docsify generates your documentation website on the fly. Unlike GitBook, it does not generate static html files. Instead, it smartly loads and parses your Markdown files and displays them as a website.</p><p>我有用它来写文档</p></blockquote><h1 id="videojs"><a href="#videojs" class="headerlink" title="videojs"></a><a href="https://videojs.com/">videojs</a></h1><blockquote><p>一个在线播放视频的框架</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS实用代码块</title>
      <link href="/blog/2021/07/14/JS%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/blog/2021/07/14/JS%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="处理从-Excel-中复制的数据"><a href="#处理从-Excel-中复制的数据" class="headerlink" title="处理从 Excel 中复制的数据"></a>处理从 Excel 中复制的数据</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent">参考链接</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;paste&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> html = event.clipboardData.getData(<span class="string">&quot;text/html&quot;</span>); <span class="comment">// 获取 html格式内容</span></span><br><span class="line"><span class="keyword">var</span> $doc = <span class="keyword">new</span> DOMParser().parseFromString(html, <span class="string">&quot;text/html&quot;</span>); <span class="comment">//转为 html格式</span></span><br><span class="line"><span class="keyword">var</span> $trs = <span class="built_in">Array</span>.from($doc.querySelectorAll(<span class="string">&quot;table tr td&quot;</span>)); <span class="comment">// 筛选单元格</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">$trs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 取单元格文本值</span></span><br><span class="line"><span class="keyword">var</span> val = item.textContent.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">val = <span class="built_in">isNaN</span>(val) ? <span class="string">&quot;&quot;</span> : val;</span><br><span class="line">arr.push(val);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="hexo-支持-PWA"><a href="#hexo-支持-PWA" class="headerlink" title="hexo 支持 PWA"></a>hexo 支持 PWA</h1><p><a href="https://www.imgyh.com/posts/74ba30cc/">参考链接</a><br><a href="https://dev.to/njromano/how-to-scope-your-pwa-service-workers-1n6m">How to Scope Your Free Range PWA Service Workers</a><br><a href="https://blog.ihoey.com/posts/javascript/PWA/2019-02-18-progressive-web-apps-blog.html">PWA</a></p><ul><li>找个支持 PWA 的主题，例如 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></li><li><a href="https://realfavicongenerator.net/">制作各平台的图标</a></li><li>添加 manifest.json</li><li>注入 service work</li></ul><h1 id="drop-生效条件"><a href="#drop-生效条件" class="headerlink" title="drop 生效条件"></a>drop 生效条件</h1><p>页面很多的地方是无效触发 drop 事件的，因此想要触发，在 <code>dragenter</code> <code>dragover</code> 时需要禁用默认行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault();</span><br><span class="line"></span><br><span class="line">function doDragOver(event) &#123;</span><br><span class="line">  const isLink &#x3D; event.dataTransfer.types.includes(&quot;text&#x2F;uri-list&quot;);</span><br><span class="line">  if (isLink) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#droptargets">参考链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程相关概念</title>
      <link href="/blog/2021/07/13/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>/blog/2021/07/13/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>提供两把钥匙，即<strong>公钥</strong>和<strong>私钥</strong></p><ul><li>公钥提供给外界将内容加密</li><li>私钥将外界用公钥加密的内容还原</li></ul><p>例子：<br>公钥为: 91<br>私钥为: 11<br>内容为：123</p><p>加密的内容为：(公钥)91<em>123(内容) = 11193(加密内容)<br>加密内容优化：舍去前两位，防止倒推即：193(最终加密内容)<br>解密：(加密内容)193</em>11(私钥) = 2123(内容)<br>内容的后三位即原始内容：123</p><p>原理：<br>91 乘以 11 等于 1001，而任何一个三位数乘以 1001 后，末三位显然都不变（例如 123 乘以 1001 就等于 123123）</p><h1 id="互联网协议"><a href="#互联网协议" class="headerlink" title="互联网协议"></a>互联网协议</h1><ul><li>实体层<ul><li>将(设备)电脑用网线、无线电波等方式连接起来，传输电讯号 0 和 1</li></ul></li><li>链接层<ul><li>单纯的 0 和 1 没有意义，编码与解码规则</li><li><code>以太网协议</code><ul><li>将一组电讯号构成一个数据包，包分：head 与 data</li></ul></li><li><strong>MAC 地址</strong><ul><li>入网的设备都须要有网卡接口，网卡的地址就是数据包发送地址与接收地址，即 MAC 地址</li></ul></li><li><strong>广播</strong><ul><li>设备 A 向设备 B 通讯，并不是点对点的通讯，而是在网内广播，如果接收的地址与本机的 MAC 地址一致则接收，否则丢弃这个包</li></ul></li></ul></li><li>网络层<ul><li><code>IP协议</code><ul><li>分配 IP 地址</li><li>确定地址是否在同一个子网络</li></ul></li></ul></li><li>传输层<ul><li><code>UDP协议</code></li><li><code>TCP协议</code></li></ul></li><li>应用层<ul><li><code>HTTP协议</code></li></ul></li></ul><h1 id="Pixel、DPI-PPI-以及像素密度"><a href="#Pixel、DPI-PPI-以及像素密度" class="headerlink" title="Pixel、DPI/PPI 以及像素密度"></a>Pixel、DPI/PPI 以及像素密度</h1><ul><li>DPI (dots per inch)</li><li>PPI (pixel per inch)</li></ul><p><strong>参考连接:</strong></p><p><a href="https://editor.leonh.space/2021/rediscover-pixel-dpi-ppi-and-pixel-density/">重新認識 Pixel、DPI / PPI 以及像素密度</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常识扫盲</title>
      <link href="/blog/2021/05/08/Linux%E5%B8%B8%E8%AF%86%E6%89%AB%E7%9B%B2/"/>
      <url>/blog/2021/05/08/Linux%E5%B8%B8%E8%AF%86%E6%89%AB%E7%9B%B2/</url>
      
        <content type="html"><![CDATA[<p>普通用户理论上很少接触 <strong>Linux</strong> 系统，毕竟 <strong>Windows</strong> 的图形化操作方便直接，普罗大众；但作为开发人员，不论你是前端还是后端，<strong>Linux</strong> 是一个绕不开的话题，最终都会须要学习它。</p><p>本文不谈 <strong>Linux</strong> 任何原理，因为一上来就跟你掰扯这些，是感受不到实际操作快乐的。</p><p>现在假定你还是 <strong>Windows</strong> 为生产力的输出，想体验 <strong>Linux</strong>,那么可以使用 <strong>WSL</strong> 来初步上手。</p><p>我们假定的场景是：</p><ol><li> 有了 Linux 环境</li><li> 进入目录，创建新的项目目录</li><li> 创建新的文件</li><li> 对文件进行编辑</li><li> 发布项目</li><li> 访问项目</li></ol><p>好了，开始吧~</p><h2 id="开始练手"><a href="#开始练手" class="headerlink" title="开始练手"></a>开始练手</h2><h3 id="新建项目目录"><a href="#新建项目目录" class="headerlink" title="新建项目目录"></a>新建项目目录</h3><p>假定我们想在 <code>/home/</code>目录下新建 <code>helloworld</code>目录，命令如下：</p><blockquote><p>$ cd /home/<br>$ mkdir helloworld</p></blockquote><h3 id="新建项目文件"><a href="#新建项目文件" class="headerlink" title="新建项目文件"></a>新建项目文件</h3><p>在 <code>helloworld</code> 目录下，新建 <code>index.html</code> 文件</p><blockquote><p>$ cd helloworld<br>$ :&gt;index.html</p></blockquote><h3 id="修改文件内容"><a href="#修改文件内容" class="headerlink" title="修改文件内容"></a>修改文件内容</h3><blockquote><p>$ vim index.html</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在编辑器中输入</span><br><span class="line">this is index.html file.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按 esc 后</span><br><span class="line">&#x2F;&#x2F;输入  :wq</span><br></pre></td></tr></table></figure><h2 id="Linux-常用命令解释与全称"><a href="#Linux-常用命令解释与全称" class="headerlink" title="Linux 常用命令解释与全称"></a>Linux 常用命令解释与全称</h2><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><ul><li>swith user</li><li>切换用户</li></ul><p>切换至 root (超级管理)用户</p><blockquote><p>$ su</p></blockquote><p>切换至 xiaoming (普通)用户</p><blockquote><p>$ su xiaoming</p></blockquote><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><ul><li>print working directory</li><li>显示当前的(工作)目录</li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul><li>change directory</li><li>切换(改变) 目录</li></ul><p>回到上级目录</p><blockquote><p>$ cd ..</p></blockquote><p>进入当前目录下的 home 文件夹</p><blockquote><p>$ cd home/</p></blockquote><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><ul><li>make directory</li><li>新建目录</li></ul><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><ul><li>remove directory</li><li>删除目录</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li>list files</li><li>列出当前目录下的文件</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用WSL</title>
      <link href="/blog/2021/04/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8WSL/"/>
      <url>/blog/2021/04/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8WSL/</url>
      
        <content type="html"><![CDATA[<p>WSL(Windows Subsystem for Linux)，在 Windows 下提供 Linux 运行环境，不会带来传统虚拟机与双系统的累赘。</p><p>正常情况下想在 Windows 下使用 Linux，得安装虚拟机，然后在虚拟机中运行 Linux，虚拟机本身带来了开销。或者制作双系统，但又带来了 Windows 与 Linux 两系统间切换的麻烦。所以 WSL 解决了以上两个痛点。</p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">安装教程</a>直接参考官网的即可，非常清晰。</p><p>两篇参考文章，还没用到，留作备份</p><p><a href="https://zhuanlan.zhihu.com/p/144583887">WSL2 来了！但是能正常使用并不简单</a></p><p><a href="https://zhuanlan.zhihu.com/p/151392411">关于使用 WSL2 出现“参考的对象类型不支持尝试的操作”的解决方法</a></p><p>使用<strong>VS Code</strong>编辑现有的项目，有下面几种方式<br>1、进入<em>WLS</em>下的项目目录，运行 <code>code .</code> 即可。</p><p>默认情况下<strong>WSL</strong>没有设置<strong>root</strong>密码，可如下来设置</p><blockquote><p>$ sudo passwd root</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>买房相关</title>
      <link href="/blog/2021/04/06/%E4%B9%B0%E6%88%BF%E7%9B%B8%E5%85%B3/"/>
      <url>/blog/2021/04/06/%E4%B9%B0%E6%88%BF%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="专业名词扫盲"><a href="#专业名词扫盲" class="headerlink" title="专业名词扫盲"></a>专业名词扫盲</h2><h3 id="得房率"><a href="#得房率" class="headerlink" title="得房率"></a>得房率</h3><p>简单粗暴理解：可供人类的使用面积（即除去公摊部分的面积）</p><p>例子：产权面积 100 平米，得房率 80%，则可使用面积为 80 平米</p><p><img src="https://z3.ax1x.com/2021/07/05/R4w0Ln.jpg" alt="建筑类型之参考范围"></p><h3 id="建筑类型"><a href="#建筑类型" class="headerlink" title="建筑类型"></a>建筑类型</h3><h4 id="板楼"><a href="#板楼" class="headerlink" title="板楼"></a>板楼</h4><p><img src="https://z3.ax1x.com/2021/07/05/R4RZgx.jpg" alt="板楼介绍"></p><p><img src="https://z3.ax1x.com/2021/07/05/R4RnKK.jpg" alt="板楼选择"></p><h4 id="塔楼"><a href="#塔楼" class="headerlink" title="塔楼"></a>塔楼</h4><p><img src="https://z3.ax1x.com/2021/07/05/R4RG8I.jpg" alt="塔楼介绍"></p><p><img src="https://z3.ax1x.com/2021/07/05/R4R0aQ.jpg" alt="塔楼选择"></p><h3 id="户型结构"><a href="#户型结构" class="headerlink" title="户型结构"></a>户型结构</h3><h4 id="平层"><a href="#平层" class="headerlink" title="平层"></a>平层</h4><p><img src="https://z3.ax1x.com/2021/07/05/R4r5cD.jpg" alt="平层"></p><h4 id="跃层"><a href="#跃层" class="headerlink" title="跃层"></a>跃层</h4><p><img src="https://z3.ax1x.com/2021/07/05/R4rqAI.jpg" alt="跃层"></p><h4 id="错层"><a href="#错层" class="headerlink" title="错层"></a>错层</h4><p><img src="https://z3.ax1x.com/2021/07/05/R4rzjg.jpg" alt="错层"></p><h4 id="复式"><a href="#复式" class="headerlink" title="复式"></a>复式</h4><p><img src="https://z3.ax1x.com/2021/07/05/R4sCHs.jpg" alt="复式"></p><h3 id="容积率"><a href="#容积率" class="headerlink" title="容积率"></a>容积率</h3><p>简单粗暴的理解：固定面积的土地，盖多少层楼、住多少人的关系。</p><p>容积率高：表明这一区域内，楼层高，居住人口多，公共区域活动拥挤。</p><p>容积率低：表明这一区域，楼层低，居住人口少，公共区域活动宽松。</p><p>例子：一老小区，原来是五层楼梯房，共一个单元，正好停五辆私家车，还能散下步；拆迁重建后，为 31 层的电梯房，地下停车场只能停 25 量车，上下电梯还等等。因此，理论上来说 容积率越低越好。</p><h3 id="月供"><a href="#月供" class="headerlink" title="月供"></a>月供</h3><p>单纯的从利息角度来看，等额本金比等额本息省钱。但从前期现金流看，等额本息宽松</p><h4 id="等额本息"><a href="#等额本息" class="headerlink" title="等额本息"></a>等额本息</h4><p>每个月还相同的利息，开始月到结束月，每月还的金额相等</p><h4 id="等额本金"><a href="#等额本金" class="headerlink" title="等额本金"></a>等额本金</h4><p>每个月还相同的本金，开始月到结束月，每月还的金额逐月降低</p><h3 id="满五唯一"><a href="#满五唯一" class="headerlink" title="满五唯一"></a>满五唯一</h3><p>房产证满五年，并且是唯一住房，不需要交个人所得税</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flex-布局</title>
      <link href="/blog/2021/03/25/Flex-%E5%B8%83%E5%B1%80/"/>
      <url>/blog/2021/03/25/Flex-%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>三列布局</p><section style="display:flex;">  <div style="width:50px;background-color:aliceblue;">左边栏</div>  <div style="flex:1;background-color:chocolate;">    <ul>      <li>左右两侧边栏高度，跟随内容高度</li>      <li>内容区域为不固定高度</li>      <li>我是来增加高度的</li>    </ul>  </div>  <div style="width:50px;background-color:antiquewhite;">右边栏</div></section></br><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;section style&#x3D;&quot;display:flex;&quot;&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;width:50px;background-color:aliceblue;&quot;&gt;左边栏&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;flex:1;background-color:chocolate;&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;左右两侧边栏高度，跟随内容高度&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;内容区域为不固定高度&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;我是来增加高度的&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;width:50px;background-color:antiquewhite;&quot;&gt;右边栏&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;section&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="子项"><a href="#子项" class="headerlink" title="子项"></a>子项</h2><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>当父元素有剩余空间时，分配至子项的比例</p><h4 id="子项-flex-grow-和值大于等于-1-的情景"><a href="#子项-flex-grow-和值大于等于-1-的情景" class="headerlink" title="子项 flex-grow 和值大于等于 1 的情景"></a>子项 flex-grow 和值大于等于 1 的情景</h4><p>增加的宽度(大小)为：父元素剩余空间 <code>*</code> 子项自身 grow 值 <code>/</code> 所有子项 grow 合计值</p><h4 id="子项-flex-grow-和值小于-1-的情景"><a href="#子项-flex-grow-和值小于-1-的情景" class="headerlink" title="子项 flex-grow 和值小于 1 的情景"></a>子项 flex-grow 和值小于 1 的情景</h4><p>增加的宽度(大小)为：父元素剩余空间 <code>*</code> 子项自身 grow 值</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>父元素空间不足时(即：一根轴上不能容纳所有的子项)，缩小子项的比例</p><h4 id="子项-flex-shrink-和值大于-1-的情景"><a href="#子项-flex-shrink-和值大于-1-的情景" class="headerlink" title="子项 flex-shrink 和值大于 1 的情景"></a>子项 flex-shrink 和值大于 1 的情景</h4><p>减小的宽度：溢出空间大小 <code>*</code> 子项自身 shrink 值 <code>*</code> 子项自身宽度 <code>/</code> 总权重值（各子项宽度*各子项 shrink 值之和）</p><h4 id="子项-flex-shrink-和值小于-1-的情景"><a href="#子项-flex-shrink-和值小于-1-的情景" class="headerlink" title="子项 flex-shrink 和值小于 1 的情景"></a>子项 flex-shrink 和值小于 1 的情景</h4><p>减小的宽度：<code>(</code> 溢出空间大小 <code>*</code> 各子项 shrink 和值 <code>)</code> <code>*</code> 子项自身 shrink <code>*</code> 子项自身宽度 <code>/</code> 总权重值（各子项宽度*各子项 shrink 值之和）</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><strong>flex</strong> 是 <em>flex-grow</em> <em>flex-shrink</em> <em>flex-basis</em> 的简写</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS-制作图形小知识</title>
      <link href="/blog/2021/03/19/CSS-%E5%88%B6%E4%BD%9C%E5%9B%BE%E5%BD%A2%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/blog/2021/03/19/CSS-%E5%88%B6%E4%BD%9C%E5%9B%BE%E5%BD%A2%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="同心圆"><a href="#同心圆" class="headerlink" title="同心圆"></a>同心圆</h1><div style="width: 100px; height: 100px;  border-radius: 50%;  padding: 10px;  border: 10px solid;  background-color: currentColor;  background-clip:content-box;"></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 100px; height: 100px;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  border: 10px solid;</span><br><span class="line">  background-color: currentColor;</span><br><span class="line">  background-clip:content-box;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h1 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h1><h2 id="向上"><a href="#向上" class="headerlink" title="向上"></a>向上</h2><div style="width: 0;    height: 0;    border-left: 50px solid transparent;    border-right: 50px solid transparent;    border-bottom: 100px solid red;"></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    border-bottom: 100px solid red;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="向下"><a href="#向下" class="headerlink" title="向下"></a>向下</h2><div style="width: 0;    height: 0;    border-left: 50px solid transparent;    border-right: 50px solid transparent;    border-top: 100px solid red;"></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    border-top: 100px solid red;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="向左"><a href="#向左" class="headerlink" title="向左"></a>向左</h2><div style="width: 0;    height: 0;    border-top: 50px solid transparent;    border-right: 100px solid red;    border-bottom: 50px solid transparent;"></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 50px solid transparent;</span><br><span class="line">    border-right: 100px solid red;</span><br><span class="line">    border-bottom: 50px solid transparent;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="向右"><a href="#向右" class="headerlink" title="向右"></a>向右</h2><div style="width: 0;    height: 0;    border-top: 50px solid transparent;    border-left: 100px solid red;    border-bottom: 50px solid transparent;"></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 50px solid transparent;</span><br><span class="line">    border-left: 100px solid red;</span><br><span class="line">    border-bottom: 50px solid transparent;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="左上"><a href="#左上" class="headerlink" title="左上"></a>左上</h2><div style="width: 0;    height: 0;    border-top: 100px solid red;    border-right: 100px solid transparent;"></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 100px solid red;</span><br><span class="line">    border-right: 100px solid transparent;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="右上"><a href="#右上" class="headerlink" title="右上"></a>右上</h2><div style="width: 0;    height: 0;    border-top: 100px solid red;    border-left: 100px solid transparent; "></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 100px solid red;</span><br><span class="line">    border-left: 100px solid transparent; &quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="左下"><a href="#左下" class="headerlink" title="左下"></a>左下</h2><div style="width: 0;    height: 0;    border-bottom: 100px solid red;    border-right: 100px solid transparent;"></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-bottom: 100px solid red;</span><br><span class="line">    border-right: 100px solid transparent;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="右下"><a href="#右下" class="headerlink" title="右下"></a>右下</h2><div style="width: 0;    height: 0;    border-bottom: 100px solid red;    border-left: 100px solid transparent;"></div><details><summary>点击显示源代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-bottom: 100px solid red;</span><br><span class="line">    border-left: 100px solid transparent;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RN-相关</title>
      <link href="/blog/2021/03/11/RN-%E7%9B%B8%E5%85%B3/"/>
      <url>/blog/2021/03/11/RN-%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓-Android"><a href="#安卓-Android" class="headerlink" title="安卓(Android)"></a>安卓(Android)</h1><h2 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h2><p>前端思维理解就是 npm + gulp/grunt<br>gradle 可以用来安装第三方包，并且将项目打包</p><h2 id="adb-Android-Debug-Bridge-相关命令"><a href="#adb-Android-Debug-Bridge-相关命令" class="headerlink" title="adb (Android Debug Bridge) 相关命令"></a>adb (Android Debug Bridge) 相关命令</h2><h3 id="adb-devices"><a href="#adb-devices" class="headerlink" title="adb devices"></a>adb devices</h3><p><img src="https://s3.ax1x.com/2021/03/11/6Ygh40.jpg" alt="查看已连接的设备"></p><h3 id="adb-reverse"><a href="#adb-reverse" class="headerlink" title="adb reverse"></a>adb reverse</h3><p>将电脑端口映射到移动设备</p><blockquote><p>adb reverse tcp:8081 tcp:8081</p></blockquote><h3 id="连接了多个设备，对指定设备进行操作"><a href="#连接了多个设备，对指定设备进行操作" class="headerlink" title="连接了多个设备，对指定设备进行操作"></a>连接了多个设备，对指定设备进行操作</h3><p>对指定设备安装应用</p><blockquote><p>adb -s [devicecode] install [package.app]<br>adb -s RCJ6R20921001617 install com.notive</p></blockquote><p>对指定设备映射端口</p><blockquote><p>adb -s [devicecode] reverse tcp:[port] tcp:[port]<br>adb -s RCJ6R20921001617 reverse tcp:8081 tcp:8081</p></blockquote><h3 id="查看手机当前启动-app-的应用名和包名"><a href="#查看手机当前启动-app-的应用名和包名" class="headerlink" title="查看手机当前启动 app 的应用名和包名"></a>查看手机当前启动 app 的应用名和包名</h3><blockquote><p>adb shell dumpsys window w |findstr / |findstr name=</p></blockquote><p><img src="https://s3.ax1x.com/2021/03/11/6YR0l8.jpg" alt="查看当前打开应用的包名"></p><h3 id="设备不能进入调试模式"><a href="#设备不能进入调试模式" class="headerlink" title="设备不能进入调试模式"></a>设备不能进入调试模式</h3><ol><li>撤销 usb 调试授权</li><li>重新开启 usb 调试</li><li>重新连接充电线，选择读取文件模式(非必要)</li></ol><h3 id="wifi-无数据线连接"><a href="#wifi-无数据线连接" class="headerlink" title="wifi (无数据线连接)"></a>wifi (无数据线连接)</h3><ol><li>摇晃安卓设备</li><li>点击<strong>change bundle</strong>，并输入开发本机 ip 地址与端口号</li></ol><h3 id="react-devtools"><a href="#react-devtools" class="headerlink" title="react-devtools"></a>react-devtools</h3><blockquote><p>adb shell input keyevent 82</p></blockquote><p>点击 **Toggle Inspector ** 唤起 <em>react-devtools</em> 应用</p><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><h2 id="设置路径别称-alias"><a href="#设置路径别称-alias" class="headerlink" title="设置路径别称 (alias)"></a><a href="https://mtateam.medium.com/how-to-use-import-aliases-with-react-native-and-vs-code-dadb246674c7">设置路径别称 (alias)</a></h2><blockquote><p>npm i -D metro-react-native-babel-preset</p></blockquote><blockquote><p>npm i -D babel-plugin-module-resolver</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在babel.config.js中设置</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  presets: [&#39;module:metro-react-native-babel-preset&#39;],</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &#39;module-resolver&#39;,</span><br><span class="line">      &#123;</span><br><span class="line">        root: [&#39;.&#x2F;src&#39;],</span><br><span class="line">        extensions: [</span><br><span class="line">          &#39;.ios.ts&#39;,</span><br><span class="line">          &#39;.android.ts&#39;,</span><br><span class="line">          &#39;.ts&#39;,</span><br><span class="line">          &#39;.ios.tsx&#39;,</span><br><span class="line">          &#39;.android.tsx&#39;,</span><br><span class="line">          &#39;.tsx&#39;,</span><br><span class="line">          &#39;.jsx&#39;,</span><br><span class="line">          &#39;.js&#39;,</span><br><span class="line">          &#39;.json&#39;,</span><br><span class="line">        ],</span><br><span class="line">        alias: &#123;</span><br><span class="line">          &#x2F;&#x2F;&#39;@navigation&#39;: &#39;.&#x2F;src&#x2F;navigation&#39;,</span><br><span class="line">          &#x2F;&#x2F;&#39;@components&#39;: &#39;.&#x2F;src&#x2F;components&#39;,</span><br><span class="line">          &#x2F;&#x2F;&#39;@assets&#39;: &#39;.&#x2F;assets&#39;,</span><br><span class="line">          &#39;@&#39;: &#39;.&#x2F;src&#x2F;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改项目根目录下的 <strong>jsconfig.json</strong> 与 <strong>tsconfig.json</strong> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*在 compilerOptions 节点下新增如下内容*&#x2F;</span><br><span class="line"></span><br><span class="line">&quot;baseUrl&quot;: &quot;.&#x2F;&quot;,</span><br><span class="line">&quot;paths&quot;: &#123;</span><br><span class="line">  &quot;@&#x2F;*&quot;: [</span><br><span class="line">    &quot;src&#x2F;*&quot;</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在 vscode 中安装 <strong>Path Intellisense</strong> 插件<br>之后设置<strong>Path Intellisense</strong>的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;path-intellisense.mappings&quot;: &#123;</span><br><span class="line">        &quot;@&quot;: &quot;$&#123;workspaceRoot&#125;&#x2F;src&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&quot;path-intellisense.extensionOnImport&quot;: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> RN </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2021/03/11/hello-world/"/>
      <url>/blog/2021/03/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/blog/2021/03/01/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/blog/2021/03/01/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="概念扫盲"><a href="#概念扫盲" class="headerlink" title="概念扫盲"></a>概念扫盲</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>微信小程序不是微信自己空穴来风，而是微信想让自己这个 app 用的更加顺滑。我之前虽未从事过微信的开发，但是之前微信里的文章与应用是靠公众号传播的，也就是基于网页。但基于网页，避免不了的一个问题便是：首页白屏。</p><p>在推出小程序之前，微信也推出过<code>微信 Web 资源离线存储</code>解决方案，可以解决部分白屏的场景但也非全部。并且基于 web 网页的交互存在页面切换生硬和点击的迟滞感。</p><p>因此小程序这个概念和方案就应运而生了</p><h2 id="小程序到底是啥"><a href="#小程序到底是啥" class="headerlink" title="小程序到底是啥"></a>小程序到底是啥</h2><p>小程序说白了，还是<code>web游览器</code>。</p><p>对~ 你没有看错，还是游览器，但是经过改造的游览器。</p><p>我们平常所使用的游览器有且只有一个主线程，因此，在我们看到最终界面时，时(流)序(程)图 是下面这样的</p><div class="mermaid">graph TBjavascript --加载解析--&gt; 主线程css --加载解析--&gt; 主线程HTML --加载解析--&gt; 主线程主线程 --&gt; 页面</div><p>想最终看到一个网页，必须等到 <strong>javascript</strong> <strong>HTML</strong> <strong>CSS</strong> 三者均加载完毕并解析完成，才能显示到用户面前</p><p>小程序的实现则不一样，由两个线程构成</p><div class="mermaid">graph TBjavascript --加载解析--&gt; 逻辑线程css --加载解析--&gt; 渲染线程HTML --加载解析--&gt; 渲染线程渲染线程 --&gt; 页面逻辑线程 --&gt; 页面</div><p>渲染线程执行完毕后，用户就能看到页面，而不用等到 javascript(逻辑线程)执行完，因此可以简单粗暴的理解，快就快在这里</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS图片分析开源包</title>
      <link href="/blog/2021/02/18/JS%E5%9B%BE%E7%89%87%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E5%8C%85/"/>
      <url>/blog/2021/02/18/JS%E5%9B%BE%E7%89%87%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="face-api-js"><a href="#face-api-js" class="headerlink" title="face-api.js"></a><a href="https://github.com/justadudewhohacks/face-api.js">face-api.js</a></h1><p>人像识别</p><h1 id="tesseract-js"><a href="#tesseract-js" class="headerlink" title="tesseract.js"></a><a href="https://github.com/naptha/tesseract.js">tesseract.js</a></h1><p>OCR 识别</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的效率软件</title>
      <link href="/blog/2020/09/16/%E6%88%91%E7%9A%84%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6/"/>
      <url>/blog/2020/09/16/%E6%88%91%E7%9A%84%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-OS"><a href="#Windows-OS" class="headerlink" title="Windows OS"></a>Windows OS</h1><h2 id="scrcpy"><a href="#scrcpy" class="headerlink" title="scrcpy"></a><a href="https://github.com/Genymobile/scrcpy">scrcpy</a></h2><p><img src="https://z3.ax1x.com/2021/04/12/cBodBt.jpg" alt="scrcpy 使用截图"><br>在 Linux,Window,macOS 上，操控或显示 android 设备</p><h3 id="Wox"><a href="#Wox" class="headerlink" title="Wox"></a><a href="http://www.wox.one/">Wox</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y5cJFP.jpg" alt="Wox 使用截图"><br>快速搜索，类似 mac 的 spotlight，与 win 10 搜索； <code>alt + space</code> 快速呼出(可改快捷键)，非常的爽</p><h3 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a><a href="https://www.voidtools.com/">Everything</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y5gR4P.jpg" alt="Everything 使用截图"><br>文件搜索，配合 Wow 使用，快速揪出你想要的文件</p><h3 id="QuickLook"><a href="#QuickLook" class="headerlink" title="QuickLook"></a><a href="https://github.com/QL-Win/QuickLook">QuickLook</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y5RYJx.jpg" alt="QuickLook win10商店介绍"><br>空格键后，快速预览工具</p><h3 id="Riot"><a href="#Riot" class="headerlink" title="Riot"></a><a href="https://riot-optimizer.com/">Riot</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y5Wl1f.jpg" alt="Riot 使用截图"><br>图片压缩，用过的人都说好</p><h3 id="Peacock-Color-Picker"><a href="#Peacock-Color-Picker" class="headerlink" title="Peacock Color Picker"></a><a href="https://peacock-color-picker.en.softonic.com/download">Peacock Color Picker</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y5foR0.jpg" alt="Peacock Color Picker 使用截图"><br>屏幕拾色软件，现在基本不用了，用下面的 <code>Snipaste</code> 代替了</p><h3 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a><a href="https://www.snipaste.com/">Snipaste</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y55sR1.png" alt="Snipaste 使用截图"><br>屏幕截图，亦拾色</p><h3 id="ScreenToGif"><a href="#ScreenToGif" class="headerlink" title="ScreenToGif"></a><a href="https://www.screentogif.com/">ScreenToGif</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y55gsK.gif" alt="ScreenToGif 使用截图"><br>录制屏幕生成 gif</p><h3 id="iConvert-Icons"><a href="#iConvert-Icons" class="headerlink" title="iConvert Icons"></a><a href="https://iconverticons.com/">iConvert Icons</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y55hIH.png" alt="iConvert Icons 使用截图"><br>给 app 生成 ico 图片</p><h3 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a><a href="https://www.telerik.com/fiddler">Fiddler</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y55oRI.jpg" alt="Fiddler 使用截图"><br>抓包软件，可修改请求与响应信息</p><h3 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a><a href="http://www.proxifier.com/">Proxifier</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y55zJs.png" alt="Proxifier 使用截图"><br>指定应用程序走代理</p><h1 id="Online-Tools"><a href="#Online-Tools" class="headerlink" title="Online Tools"></a>Online Tools</h1><h3 id="Android-图标生成器"><a href="#Android-图标生成器" class="headerlink" title="Android 图标生成器"></a><a href="http://androidasset.studio/">Android 图标生成器</a></h3><p><img src="https://s3.ax1x.com/2021/02/20/y5IrTg.jpg" alt="androidasset.studio 网页"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs 相关</title>
      <link href="/blog/2019/12/09/nodejs-%E7%9B%B8%E5%85%B3/"/>
      <url>/blog/2019/12/09/nodejs-%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="科普扫盲"><a href="#科普扫盲" class="headerlink" title="科普扫盲"></a>科普扫盲</h1><h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><blockquote><p>npx 会首先在当前目录下查找模块，如果有则执行 如果当前目录下没有指定模块，则将模块下载到临时文件，然后执行模块，执行后删除</p></blockquote><ul><li><a href="http://nodejs.cn/learn/the-npx-nodejs-package-runner#%E8%BD%BB%E6%9D%BE%E5%9C%B0%E8%BF%90%E8%A1%8C%E6%9C%AC%E5%9C%B0%E5%91%BD%E4%BB%A4">轻松地运行本地命令</a></li><li><a href="http://nodejs.cn/learn/the-npx-nodejs-package-runner#%E6%97%A0%E9%9C%80%E5%AE%89%E8%A3%85%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">无需安装的命令执行</a></li><li><a href="http://nodejs.cn/learn/the-npx-nodejs-package-runner#%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84-nodejs-%E7%89%88%E6%9C%AC%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81">使用不同的 Node.js 版本运行代码</a></li><li><a href="http://nodejs.cn/learn/the-npx-nodejs-package-runner#%E7%9B%B4%E6%8E%A5%E4%BB%8E-url-%E8%BF%90%E8%A1%8C%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5">直接从 URL 运行任意代码片段</a></li></ul><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><blockquote><p>Node Version Manager<br>Node 版本管理器，在开发环境下，方便让一台电脑安装不同版本的 node</p></blockquote><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><blockquote><p>node –inspect-brk [filename]</p></blockquote><p>立即进入 debugger 模式，chrome 地址栏 chrome://inspect 进入 debugger 页面</p><h1 id="建议全局安装的-NPM-的功能包"><a href="#建议全局安装的-NPM-的功能包" class="headerlink" title="建议全局安装的 NPM 的功能包"></a>建议全局安装的 NPM 的功能包</h1><h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><blockquote><p>NPM registry manager<br>NPM 包源管理器，默认的<code>https://registry.npmjs.org/</code>包源地址，国内常常响应缓慢，可以通过<code>nrm</code> 切换至 <code>taobao</code>源，快速方便</p></blockquote><h2 id="live-server"><a href="#live-server" class="headerlink" title="live-server"></a>live-server</h2><blockquote><p>将当前目录，设置为静态服务；之后可快速的通过本机 ip 或 localhost 的 http 形式，访问目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * 默认情况下，post请求时，是不会有返回；</span><br><span class="line"> * 如须支持，请在安装 live-server的node_modules目录下</span><br><span class="line"> * 找到 live-server 目录并进入，打开 index.js</span><br><span class="line"> * 修改第 42 行，如下：</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">if (req.method !&#x3D;&#x3D; &quot;GET&quot; &amp;&amp; req.method !&#x3D;&#x3D; &quot;POST&quot; &amp;&amp; req.method !&#x3D;&#x3D; &quot;HEAD&quot;) return next();</span><br></pre></td></tr></table></figure><h2 id="rimraf"><a href="#rimraf" class="headerlink" title="rimraf"></a>rimraf</h2><blockquote><p>删除指定文件或目录；相比系统自带的 delete，在删除目录层级很深的情形下，rimraf 速度提升不少</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue与Electron成长记</title>
      <link href="/blog/2019/11/28/Vue%E4%B8%8EElectron%E6%88%90%E9%95%BF%E8%AE%B0/"/>
      <url>/blog/2019/11/28/Vue%E4%B8%8EElectron%E6%88%90%E9%95%BF%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vue 项目完成后，如果想打包为应用程序，可以使用 Electron，从零开始，上手步骤如下：</p></blockquote><ul><li><a href="https://cli.vuejs.org/zh/guide/installation.html">安装 Vue CLI</a></li><li>通过 <code>vue ui</code> 新建项目</li><li>项目安装 <code>vue-cli-plugin-electron-builder</code> 插件</li><li>进入 <code>vue ui</code> 仪表板<ul><li>进入 <code>任务</code> 菜单<ul><li>选择 <code>electron:build</code><ul><li>设置 <code>变量</code> 后，点击 <code>运行</code> 即可尝鲜打包后的桌面应用</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐安装 Chrome 扩展程序</title>
      <link href="/blog/2019/11/26/%E6%8E%A8%E8%8D%90%E5%AE%89%E8%A3%85Chrome%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F/"/>
      <url>/blog/2019/11/26/%E6%8E%A8%E8%8D%90%E5%AE%89%E8%A3%85Chrome%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Window-Resizer"><a href="#Window-Resizer" class="headerlink" title="Window Resizer"></a><a href="https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh">Window Resizer</a></h1><blockquote><p>快速改变 chrome 窗口大小，或者视窗大小。</p></blockquote><hr><h1 id="简悦-SimpRead"><a href="#简悦-SimpRead" class="headerlink" title="简悦 - SimpRead"></a><a href="https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll">简悦 - SimpRead</a></h1><blockquote><p>类似 Safari 的阅读模式。</p></blockquote><hr><h1 id="捕捉网页截图-FireShot"><a href="#捕捉网页截图-FireShot" class="headerlink" title="捕捉网页截图 - FireShot"></a><a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg">捕捉网页截图 - FireShot</a></h1><blockquote><p>捕捉网页截图，编辑并将它们保存为 PDF，JPEG，GIF，PNG 或 BMP。</p></blockquote><hr><h1 id="沙拉查词-聚合词典划词翻译"><a href="#沙拉查词-聚合词典划词翻译" class="headerlink" title="沙拉查词-聚合词典划词翻译"></a><a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg">沙拉查词-聚合词典划词翻译</a></h1><blockquote><p>划词翻译扩展。</p></blockquote><hr><h1 id="uBlock-Origin"><a href="#uBlock-Origin" class="headerlink" title="uBlock Origin"></a><a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm">uBlock Origin</a></h1><blockquote><p>广告拦截，不同于其它的竞品，uBlock Origin 是检测到广告后直接不请求，不渲染，而不是动态隐藏</p></blockquote><hr><h1 id="WEB-前端助手-FeHelper"><a href="#WEB-前端助手-FeHelper" class="headerlink" title="WEB 前端助手(FeHelper)"></a><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad">WEB 前端助手(FeHelper)</a></h1><blockquote><p>包含多个独立小应用，比如：Json 工具、代码美化、代码压缩、二维码、Postman、markdown、网页油猴、便签笔记、信息加密与解密、随机密码生成、Crontab 等等。</p></blockquote><hr><h1 id="User-Agent-Switcher-for-Chrome"><a href="#User-Agent-Switcher-for-Chrome" class="headerlink" title="User-Agent Switcher for Chrome"></a><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg">User-Agent Switcher for Chrome</a></h1><blockquote><p>模拟修改 User-Agent。</p></blockquote><hr><h1 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc">Octotree</a></h1><blockquote><p>Github 目录层级以树形式展示，便捷查看。</p></blockquote><hr><h1 id="OctoLinker"><a href="#OctoLinker" class="headerlink" title="OctoLinker"></a><a href="https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp">OctoLinker</a></h1><blockquote><p>在 github 项目源码里点击链接，可以直接访问对应的文件</p></blockquote><h1 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb">Vimium</a></h1><blockquote><p>像 vim 一样，仅使用键盘来游览操作网页</p></blockquote><h1 id="Privacy-Badger"><a href="#Privacy-Badger" class="headerlink" title="Privacy Badger"></a><a href="https://chrome.google.com/webstore/detail/privacy-badger/pkehgijcmpdhfbdbbnkijodmdjhbjlgp">Privacy Badger</a></h1><blockquote><p>保护隐私，防止追踪</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS-Date-总结</title>
      <link href="/blog/2018/08/01/JS-Date-%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2018/08/01/JS-Date-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 javascript 中对日期的操作还是很多的，比如给日期控件设定个默认值，在 vue 中根据 Date 值返回对应毫秒数，使用场景还是很多的，那么个人常用的场景有如下：</p></blockquote><ul><li>给日期控件设定默认值时，需要指定默认的日期时间，例如设定默认日期时间为 <code>2008-10-08 12:12:12</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2008-10-08 12:12:12&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> defaultDateMS = <span class="built_in">Date</span>.parse(defaultDate);</span><br><span class="line"><span class="built_in">console</span>.log(defaultDate); <span class="comment">//Wed Oct 08 2008 12:12:12 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(defaultDateMS); <span class="comment">//1223439132000</span></span><br></pre></td></tr></table></figure><ul><li>默认值为当前的前一天的早上六点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().setHours(<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">defaultDate.setDate(defaultDate.getDate() - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(defaultDate); <span class="comment">//Tue Jul 31 2018 06:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(defaultDate)); <span class="comment">//1532988000000</span></span><br></pre></td></tr></table></figure><ul><li>默认值为上月的第一天或最后一天</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lastMonthFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().setHours(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">lastMonthFirstDay.setMonth(lastMonthFirstDay.getMonth() - <span class="number">1</span>);</span><br><span class="line">lastMonthFirstDay.setDate(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lastMonthFirstDay); <span class="comment">//Sun Jul 01 2018 00:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(lastMonthFirstDay)); <span class="comment">//1530374400000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lastMonthLastDay = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().setHours(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">lastMonthLastDay.setDate(<span class="number">1</span>);</span><br><span class="line">lastMonthLastDay.setDate(lastMonthLastDay.getDate() - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lastMonthLastDay); <span class="comment">//Tue Jul 31 2018 00:00:00 GMT+0800</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.parse(lastMonthLastDay)); <span class="comment">//1532966400000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-网传问题回顾</title>
      <link href="/blog/2018/06/07/JS-%E7%BD%91%E4%BC%A0%E9%97%AE%E9%A2%98%E5%9B%9E%E9%A1%BE/"/>
      <url>/blog/2018/06/07/JS-%E7%BD%91%E4%BC%A0%E9%97%AE%E9%A2%98%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>使用 typeof bar ===“object”来确定 bar 是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？</li><li>let a = b = c = ‘value’; 方式声明赋值时，有没有潜在风险？</li></ul><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><h2 id="使用-typeof-bar-“object”-来确定-bar-是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？"><a href="#使用-typeof-bar-“object”-来确定-bar-是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？" class="headerlink" title="使用 typeof bar === “object” 来确定 bar 是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？"></a>使用 typeof bar === “object” 来确定 bar 是否是一个对象时有什么潜在的缺陷？这个陷阱如何避免？</h2><p>之所以使用 <code>typeof bar === object&quot;</code> ，是因为大多数情况下我们想检测一个变量是否为一个对象。但是当待检测的变量为<code>null</code> ，或者赋值方式为以下几种方式时，如果没有深入了解数据类型的话，则会有挠头的姿态出现了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> e = <span class="string">&quot;just string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a, a, a.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b, b, b.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c, c, c.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d, d, d.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e);</span><br></pre></td></tr></table></figure><p>这里当值为 <code>null</code>，或者以 <code>new</code>关键字形式赋值后，输出的值均为 object。这里不深究数据类型，但如果我们想确切的检测一个变量的类型时，可以参考 jQuery 的实现方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*此处为非jQuery，但参考jQuery而来的实现方式代码块*/</span></span><br><span class="line"><span class="keyword">const</span> class2type = &#123;&#125;;</span><br><span class="line"><span class="string">&quot;Boolean Number String Function Array Date RegExp Object Error Symbol&quot;</span>.split(<span class="string">&quot; &quot;</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">class2type[<span class="string">&quot;[object &quot;</span> + item + <span class="string">&quot;]&quot;</span>] = item.toLowerCase();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> obj + <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Support: Android &lt;=2.3 only (functionish RegExp)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> obj === <span class="string">&quot;function&quot;</span> ? class2type[toString.call(obj)] || <span class="string">&quot;object&quot;</span> : <span class="keyword">typeof</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">110</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> e = <span class="string">&quot;just string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(type(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">console</span>.log(type(a));</span><br><span class="line"><span class="built_in">console</span>.log(type(b));</span><br><span class="line"><span class="built_in">console</span>.log(type(c));</span><br><span class="line"><span class="built_in">console</span>.log(type(d));</span><br><span class="line"><span class="built_in">console</span>.log(type(<span class="string">&quot;just string&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="let-a-b-c-‘value’-方式声明赋值时，有没有潜在风险？"><a href="#let-a-b-c-‘value’-方式声明赋值时，有没有潜在风险？" class="headerlink" title="let a = b = c = ‘value’; 方式声明赋值时，有没有潜在风险？"></a>let a = b = c = ‘value’; 方式声明赋值时，有没有潜在风险？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = (b = c = <span class="number">3</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a defined? &quot;</span> + (<span class="keyword">typeof</span> a !== <span class="string">&quot;undefined&quot;</span>), <span class="keyword">typeof</span> a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b defined? &quot;</span> + (<span class="keyword">typeof</span> b !== <span class="string">&quot;undefined&quot;</span>), <span class="keyword">typeof</span> b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;c defined? &quot;</span> + (<span class="keyword">typeof</span> c !== <span class="string">&quot;undefined&quot;</span>), <span class="keyword">typeof</span> c);</span><br></pre></td></tr></table></figure><p>会打印出什么内容呢？想一想。</p><p>打印的结果是：a 为 undefined，b 和 c 为赋值后的数值。为啥呢？因为我们仅对 变量 a 进行了 var 关键字变量声明，而 b 和 c 在未指定变量声明方式时，默认成为了全局变量，在根据赋值从右至左的顺序，c 和 b 相继赋值为 3。</p><p>好了，以上情况仅在非严格模式下出现，在严格模式下，因为 b 和 c 未指定变量声明关键字，会提示 <code>ReferenceError: b c is not defined</code>。</p><p>再来，那在非严格模式下，有没有啥潜在隐患呢？思考下面的代码块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>,</span><br><span class="line">c = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a,</span><br><span class="line">b,</span><br><span class="line">c = <span class="number">3</span>;</span><br><span class="line">a = b = c;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a + b + c = &quot;</span> + (a + b + c));</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b + c = &quot;</span> + (b + c));</span><br><span class="line"><span class="comment">/*----------------------------------*/</span></span><br><span class="line"><span class="keyword">var</span> bb = <span class="number">1</span>,</span><br><span class="line">cc = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> aa = (bb = cc = <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;aa + bb + cc = &quot;</span> + (aa + bb + cc));</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;bb + cc = &quot;</span> + (bb + cc));</span><br></pre></td></tr></table></figure><p>可以注意到，两者的区别就在立即执行函数内部 变量的声明和赋值方式，也因此最后输出的值产生了差异。在代码块 1 中，立即执行函数中，相继声明了 b , c 两个局部变量，之后的赋值也正是赋值给此两个局部变量；而代码块 2 中，则是对全局变量 bb ，cc 赋值，也就造成最终二者不同的输出值了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE中的-methods-computed-watch</title>
      <link href="/blog/2018/06/04/VUE%E4%B8%AD%E7%9A%84-methods-computed-watch/"/>
      <url>/blog/2018/06/04/VUE%E4%B8%AD%E7%9A%84-methods-computed-watch/</url>
      
        <content type="html"><![CDATA[<p><a href="https://css-tricks.com/methods-computed-and-watchers-in-vue-js/#article-header-id-2">原文地址</a></p><p><code>methods</code>,<code>computed</code>和<code>watch</code>的易用性与相互之间明确使用场景的定位，是我喜欢使用 Vue 的原因之一。如不了解以上三者，那么很难发挥 Vue 的所有潜在功能。在我看来，大多数对此(Vue)框架有困惑的人，同时对以上三者的区别也有着疑惑，那么现在让我们来探究下。</p><p>如果你只须一个结论，或者没有时间通读全文，以下则是总结：</p><ul><li><strong>methods</strong>: 如同词语自身描述的一样。它们是处理对象的方法，通常来说是 Vue 实例本身，或者是 Vue 组件。</li><li><strong>computed</strong>: 这些属性第一眼看起来，像是被当作方法使用，但实则不然。在 Vue 中，我们使用 <code>data</code> 来跟踪特定属性的变化。computed 属性允许我们定义一个属性以 <code>data</code> 同样的方式来使用，但不同是，拥有一套自定的逻辑基于已有的缓存依赖项上。你可以把计算属性认为是 <code>data被逻辑处理后的形式</code>。</li><li><strong>watch</strong>: 其能允许你一览反应系统。我们提供了些钩子来观察存储在 Vue 中的任何属性。如果我们想在每时每刻一有变化时就增加一些功能，或者相应特定的变化，我们可以监听一个属性，然后，赋予些逻辑。这就是说，监听器<code>必须匹配</code>我们所观察的属性。</li></ul><p>如果以上的措辞使你困惑，别着急。接下来我们将深入讲解，以希望能解决你的所有疑惑。如果你已对 JavaScript 很熟悉，methods 对你应毫无压力，(当然除了一两个值得留心的小点)。那么可以直接游览 computed 和 watch 章节。</p><h1 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h1><p>Methods 应该是我们在 Vue 中使用的最多了东西了。They’re aptly named as, in essence, we’re hanging a function off of an object。在给事件响应指令，亦或重构一个函数进行复用的情形下，方法都尤为实用。例如，你能在一个方法中调用另一个方法。也能在生命周期钩子事件中调用方法。使用很是灵巧。<br>以下为一个示例演示：</p><p><a href="//codepen.io/sdras/embed/caf96f7c14dc52323b97dd9845a0bf64?height=300&theme-id=1&slug-hash=caf96f7c14dc52323b97dd9845a0bf64&default-tab=result&user=sdras&embed-version=2&pen-title=Slim%20example%20of%20methods">点击查看在线 DEMO</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html code --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;language-css&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;tryme&quot;</span>&gt;</span>Try Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&lt;/code</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* javascript code*/</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">message: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="function"><span class="title">tryme</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.message = <span class="built_in">Date</span>();</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们也能直接在事件中中执行逻辑指令，如 <code>&lt;button @click=&quot;message = Date()&quot;&gt;Try Me&lt;/button&gt;</code>，在这个小例子中也能顺利执行。但是呢，随着我们开发应用复杂度的增长，更常见的作法是如我们上面例子所展示的，把业务代码抽取出，以获得更好的代码可读性与可维护性。在 Vue 中使用指令时，也有一些限制，例如：表达式是允许的，但是声明则不行。</p><p>你可能注意到了，我们在 Vue 实例或组件中调用此方法，并且在此方法中可以访问所有的 data 数据，此例中为,<code>this.message</code>。在指令中不必非得像调用函数那样调用方法。例如，<code>@click=”methodName()”</code> 可以引用为<code>@click=”methodName”</code>，当然如需传递参数时，则是<code>@click=”methodName(param)”</code>。</p><p>使用指令调用方法很赞的另一个原因是，我们能够使用一些修饰符。下例中一个很有用的修饰符为<code>.prevent</code>，此修饰符将阻止默认提交事件后刷新页面的情形，例子如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多信息，请<a href="https://vuejs.org/v2/api/#v-on">移步到这</a></p><h1 id="Computed"><a href="#Computed" class="headerlink" title="Computed"></a>Computed</h1><p>计算属性在控制处理已有数据上是非常有用的。当你需要对一个大量数据进行排序又不想每次获取计算后的返回值时，可以了解下计算属性。</p><p>以下为一些适当使用计算属性的条件，但不局限与此：</p><ul><li>在用户输入信息后，需要对已有的大量数据更新，如过滤显示符合输入内容的信息</li><li>从 Vuex 状态管理器中采集信息。</li><li>表单验证</li><li>根据用户所想看的可视化数据信息展示</li></ul><p>对于理解 Vue，计算属性是很重要的一部分。计算属性的计算值会根据它们所依赖的数据进行缓存，并只有当符合特定条件时更新。当合理使用计算属性时，其是非常高效和有用的。此外，已经有很多健壮的库和函数提供给我们来处理业务逻辑部分，以降低编程时的代码量。</p><p>计算属性并不像方法那样来的使用，尽管它两看起来很相似。计算属性是：你在一个函数中编写逻辑代码并返回符合逻辑的值，但是 此方法的函数名 将会变成一个属性，就像你在应用使用 <code>data</code>里的属性一样。</p><p>如果我们想在一个大量的英雄名称列表中，通过输入关键字来过滤内容，我们可以采取下面的方式，并且通过这个简单的例子让你对计算属性有个初步的概念。首先，我们的使用存储在 <code>data</code> 中的 <code>names</code> 属性，将列表内容输出在模板中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      names: [</span><br><span class="line">        <span class="string">&#x27;Evan You&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;John Lindquist&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Jen Looper&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Miriam Suzanne&#x27;</span>,</span><br><span class="line">        ...</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Heroes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;name in names&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，给这些名称添加一些过滤代码。首先，给文本输入框绑定<code>v-mode</code>，且初始为空字符串值，当然最终我们会使用文本输入框中的值去匹配和过滤后我们的名称列表。给输入文本框绑定的属性值为<code>findName</code>，其与<code>data</code>中的值保持引用关联。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;filtername&quot;</span>&gt;</span>Find your hero:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;findName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;filtername&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    findName: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    names: [</span><br><span class="line">      <span class="string">&#x27;Evan You&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;John Lindquist&#x27;</span>,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们创建一个计算属性，其会根据用户在文本输入框中键入的内容，来过滤掉只符合<code>findName</code>属性值相关的名称内容。这里可以看到我使用了正则表达式来弱化了大小写的敏感度，因为作为一个用户，多数情况下是不会键入符合大小写规则的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="function"><span class="title">filteredNames</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> filter = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="built_in">this</span>.findName, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.names.filter(<span class="function"><span class="params">el</span> =&gt;</span> el.match(filter))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后我们更新页面模板中的输出项，将：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;name in names&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调整为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;name in filteredNames&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，我们每次键入任何的信息，都会展示过滤后的内容。可见我们只须键入几行代码，而不须引用其它的类库，就能顺利的实现功能需求。</p><p>我不会告诉你，这帮我省下了多少事件。如果你在使用 Vue，而未<a href="https://vuejs.org/v2/guide/computed.html#Computed-Properties">合理的使用计算属性</a> ，赶紧来试试，定让你开心的飞起来。</p><h1 id="Watchers"><a href="#Watchers" class="headerlink" title="Watchers"></a>Watchers</h1><p>Vue 有着很好的抽象体系设计，不过基本上每个编程人员在使用抽象类时，都会有遇到绕不过的坎而不爽。但也正式基于此痛点，Vue 提供给我们在响应体系中更深度的操作能力，以便我们通过设置钩子来观察任何数据的改变。讲真，这实在太有用了，因为作为一个应用的开发者，大多数时候我们是对数据的变化而响应相关操作的。</p><p>Watchers(侦听器) 允许我们编写更多声明式代码。以简化我们自己编写的代码量。Vue 已在底层实现了此功能，因此我们能在 <code>data</code>，<code>computed</code> 或 <code>props</code> 中跟踪任何数值的改变，来举个例。</p><p>Watchers(侦听器) 在监测属性值改变时，执行特定的业务逻辑代码非常好用(我第一次是从 <a href="https://twitter.com/chrisvfritz">Chris Fritz</a> 听到这种操作方式的，但是他说他也是从别处体验到的 ☺️)。多数情况下，通过检测属性的改变来执行业务逻辑，这也正是 与 计算属性不同的地方。</p><p>现在来跑一个简单的例子，感受下 watch 的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;counter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">counter: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line"><span class="function"><span class="title">counter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;The counter has changed!&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如上面代码所示，我们在<code>data</code>中设置了<code>counter</code>，并将此属性名称作为方法名称，在<code>watch</code>中配置<code>counter</code>，以便我们能监测设置的<code>counter</code>属性值，最后我们可以看到，一旦<code>counter</code>数值发生改变，控制台都有输出。</p><h1 id="Transitioning-State-With-Watchers"><a href="#Transitioning-State-With-Watchers" class="headerlink" title="Transitioning State With Watchers"></a>Transitioning State With Watchers</h1><p>如果监测的状态标识符很简单，那么可以使用 watch(侦听器)来实现一个根据状态值改变的过度效果。以下是一个使用 Vue 来完成的柱状图表。随着数值的变化，watch(侦听器)将通过过度效果来更新图表。</p><p>SVG 如下面的例子一样很好使用，因为其以 数据 来构建。</p><p><a href="//codepen.io/sdras/embed/OWZRZL?height=578&theme-id=1&slug-hash=OWZRZL&default-tab=result&user=sdras&embed-version=2&pen-title=Chart%20made%20with%20Vue,%20Transitioning%20State">点击查看 DEMO</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  selected: <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tweenedData = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> obj = <span class="built_in">Object</span>.values(tweenedData);</span><br><span class="line">      obj.pop();</span><br><span class="line">      <span class="built_in">this</span>.targetVal = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tweenSourceData = &#123; <span class="attr">onUpdate</span>: update, <span class="attr">onUpdateScope</span>: <span class="built_in">this</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldValue.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> key = i.toString()</span><br><span class="line">      tweenedData[key] = oldValue[i]</span><br><span class="line">      tweenSourceData[key] = newValue[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TweenMax.to(tweenedData, <span class="number">1</span>, tweenSourceData)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里干了些啥呢？</p><ul><li>首先我们创建了一个对象，其会通过动画库来更新。</li><li>然后这里可以看到一个<code>update</code>方法，</li><li>接下来创建一个对象来接收</li><li>接着创建一个 for 循环，将当前下编转换为字符串类型</li><li>但我们只对指定的键值执行此操作</li></ul><p>我们也能在侦听器中使用动画来实现一个时差刻度盘。因为我时不时的会外出溜达，并且我的小伙伴也分散在不同的地方，所以需求之一就是能保证一个我们各自的当地时间都能在线，并且体现出是白天还是夜晚。</p><p><a href="//codepen.io/sdras/embed/RZGqxR?height=700&theme-id=1&slug-hash=RZGqxR&default-tab=result&user=sdras&embed-version=2&pen-title=Vue%20Time%20Comparison">点击查看 DEMO</a></p><p>这里我们监听 选中的属性值，根据当前时间去触发不同的方法来改变 各个区域时间，其会通过色调，饱和度，和其它过度效果来展现。在之前的实现方式中，我们是通过下拉事件，而现在是在侦听器的方法中了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="function"><span class="title">checked</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> period = <span class="built_in">this</span>.timeVal.slice(-<span class="number">2</span>),</span><br><span class="line">      hr = <span class="built_in">this</span>.timeVal.slice(<span class="number">0</span>, <span class="built_in">this</span>.timeVal.indexOf(<span class="string">&#x27;:&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dayhr = <span class="number">12</span>,</span><br><span class="line">      rpos = <span class="number">115</span>,</span><br><span class="line">      rneg = -<span class="number">118</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((period === <span class="string">&#x27;AM&#x27;</span> &amp;&amp; hr != <span class="number">12</span>) || (period === <span class="string">&#x27;PM&#x27;</span> &amp;&amp; hr == <span class="number">12</span>)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.spin(<span class="string">`<span class="subst">$&#123;rneg - (rneg / dayhr) * hr&#125;</span>`</span>)</span><br><span class="line">      <span class="built_in">this</span>.animTime(<span class="number">1</span> - hr / dayhr, period)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.spin(<span class="string">`<span class="subst">$&#123;(rpos / dayhr) * hr&#125;</span>`</span>)</span><br><span class="line">      <span class="built_in">this</span>.animTime(hr / dayhr, period)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>关于 watchers(侦听器)还有很多其它有趣的使用方式，比如：</p><p>从输入，到异步更新，再到动画，watchers(侦听器)在更新方面能做的事实在是太多了。如果你对 Vue 是如何处理响应工作感到好奇， <a href="https://vuejs.org/v2/guide/reactivity.html">这部分指南</a>会十分有帮助。如果你想更加全面的了解 响应，我十分推荐  <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">Andre Staltz’ post</a> 和 Mike Bostock’s <a href="https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0">A Better Way to Code</a>的响应章节部分。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>希望通过以上各部分的讲解，有助于我们正确的使用三者，以及更有效的使用 Vue 来加速开发我们的应用。有报告指出，我们花费 70%的时间阅读代码，30%的时间编写代码，作为个人而言，身为维护者的我，喜欢这种感觉，通过查看代码库，开启了我之前从未了解过的编写方法，并且马上了解作者在<code>methods</code>，<code>computed</code>，<code>watchers</code>的区别用意。</p>]]></content>
      
      
      <categories>
          
          <category> 译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-Array-常用方法</title>
      <link href="/blog/2018/04/27/JS-Array-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/blog/2018/04/27/JS-Array-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><h3 id="Array-isArray-obj"><a href="#Array-isArray-obj" class="headerlink" title="Array.isArray(obj) ;"></a>Array.isArray(obj) ;</h3><blockquote><p>检测给定值是否为数组； 是则返回 true | 否则返回 false</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(Array.isArray([]));&#x2F;* true *&#x2F;</span><br><span class="line">console.log(Array.isArray(new Array(1,2)));&#x2F;* true *&#x2F;</span><br><span class="line">console.log(Array.isArray(&#123;&#125;));&#x2F;* false *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="对操作数组本身进行修改的方法"><a href="#对操作数组本身进行修改的方法" class="headerlink" title="对操作数组本身进行修改的方法"></a>对操作数组本身进行修改的方法</h3><ul><li>pop <em>删除并返回数组的最后一个元素</em></li><li>push <em>向末尾添加一个或多个元素，并返回新的长度</em></li><li>shift <em>删除并返回数据的第一个元素</em></li><li>splice <em>删除元素，并向数组添加元素</em></li><li>unshift <em>向开头添加一个或多个元素，并返回新的长度</em></li><li>reverse <em>颠倒数组中元素的顺序</em></li><li>sort <em>排序</em></li><li>fill <em>用指定值来填充数组</em></li></ul><h3 id="对操作数组本身-无影响"><a href="#对操作数组本身-无影响" class="headerlink" title="对操作数组本身 无影响"></a>对操作数组本身 无影响</h3><ul><li>concat <em>连接两个或多个数组，并返回结果</em></li><li>join <em>将数组的所有元素放入一个字符串中，元素按指定的分隔符进行连接</em></li><li>slice <em>从已有的数组返回选定的元素</em></li><li>map <em>返回调用处理方法后的数组值</em></li><li>forEach <em>遍历数组所有值，并将值逐一传给回调函数</em></li><li>filter <em>返回一个新数组，新数组中为符合条件的所有值</em></li><li>find <em>返回符合条件的第一个值</em></li><li>findIndex <em>返回符合条件第一个值得下标索引</em></li><li>indexOf <em>返回指定值在数组中首次出现的位置</em></li><li>includes <em>数组是否包含指定值</em></li><li>every <em>遍历数组，检测是否所有值都符合给定的函数判断；全部符合返回 true</em></li><li>some <em>遍历数组，检测是否有符合给定函数的判断；有一个符合则返回 true</em></li></ul><h2 id="对数组本身进行修改的方法"><a href="#对数组本身进行修改的方法" class="headerlink" title="对数组本身进行修改的方法"></a>对数组本身进行修改的方法</h2><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><blockquote><p>删除数组中的最后一个元素，并返回删除的元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,&#39;a&#39;,&#123;b:2&#125;];</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 1, 2, &#39;a&#39;, &#123; b: 2 &#125; ] *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arr.pop());</span><br><span class="line">&#x2F;* &#123; b: 2 &#125; *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 1, 2, &#39;a&#39; ] *&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><blockquote><p>向数组末尾添加一个或多个元素，并返回新的长度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2];</span><br><span class="line">let arrb &#x3D; [&#39;a&#39;,&#39;b&#39;];</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 1, 2 ] *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arr.push(...arrb));</span><br><span class="line">&#x2F;* length:4 *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 1, 2, &#39;a&#39;, &#39;b&#39; ] *&#x2F;</span><br><span class="line"></span><br><span class="line">arrb[0]&#x3D;&#39;c&#39;;</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 1, 2, &#39;a&#39;, &#39;b&#39; ] *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arrb);</span><br><span class="line">&#x2F;* [ &#39;c&#39;, &#39;b&#39; ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><blockquote><p>删除数组中的第一个元素，并返回删除的元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [&#123;a:1&#125;,2,3];</span><br><span class="line">console.log(arr.shift());</span><br><span class="line">&#x2F;* &#123;a:1&#125; *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [2,3] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><blockquote><p>向数组的头部增加一个或多个元素，并返回数组新的长度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [&#123;a:1&#125;,2,3];</span><br><span class="line">let arrb &#x3D; [&#39;c&#39;,&#123;name:&#39;dan&#39;&#125;];</span><br><span class="line">console.log(arr.unshift(...arrb));</span><br><span class="line">&#x2F;* length:5 *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ &#39;c&#39;, &#123; name: &#39;dan&#39; &#125;, &#123; a: 1 &#125;, 2, 3 ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><blockquote><p>向数组指定位置删除指定个数元素 或 添加元素，并返回删除元素的数组</p></blockquote><ul><li>index : 操作的起始位置</li><li>howmany : 删除的个数 0:不删除 | 不传:删除至数组末尾</li><li>newItem,*,newItems : 新增的元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,3,4,5];</span><br><span class="line">&#x2F;*从数组第二位新增两个元素,注:纯新增必须设置第二个参数为 0*&#x2F;</span><br><span class="line">arr.splice(2,0,&#123;a:1&#125;,234);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 1, 2, &#123; a: 1 &#125;, 234, 3, 4, 5 ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><blockquote><p>颠倒数组的前后顺序，并返回颠倒排序后的数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,3,4,5];</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 1, 2, 3, 4, 5 ] *&#x2F;</span><br><span class="line"></span><br><span class="line">arr.reverse();</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 5, 4, 3, 2, 1 ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote><p>对数组进行排序 | 无参时 按字符编码顺序升序排序 | 有参：如下</p></blockquote><ul><li>before 前一个元素</li><li>next 后一个元素<blockquote><p>升序条件如下</p></blockquote></li><li>如果 before 小于 next，在排序后的数组中 before 应该出现在 next 之前，则返回一个小于 0 的值</li><li>如果 before 等于 next，返回 0</li><li>如果 before 大于 next，在排序后的数组中 before 应该出现在 next 之后，则返回一个大于 0 的值<blockquote><p>降序条件如下</p></blockquote></li><li>如果 before 小于 next，在排序后的数组中 before 应该出现在 next 之后，则返回一个大于 0 的值</li><li>如果 before 等于 next，返回 0</li><li>如果 before 大于 next，在排序后的数组中 before 应该出现在 next 之前，则返回一个小于 0 的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [&#123;name:&#39;a&#39;,age:23&#125;,&#123;name:&#39;g&#39;,age:32&#125;,&#123;name:&#39;d&#39;,age:2&#125;,&#123;name:&#39;z&#39;,age:99&#125;,&#123;name:&#39;j&#39;,age:13&#125;,&#123;name:&#39;e&#39;,age:78&#125;,&#123;name:&#39;p&#39;,age:34&#125;,&#123;name:&#39;e&#39;,age:33&#125;];</span><br><span class="line">function sortBy(attr,ascORdesc &#x3D; &#39;asc&#39;)&#123;</span><br><span class="line">let ascORdescFlag &#x3D; (ascORdesc&#x3D;&#x3D; &#39;asc&#39;?1:-1);</span><br><span class="line">return function sort(before,next)&#123;</span><br><span class="line">before &#x3D; before[attr];</span><br><span class="line">next &#x3D; next[attr];</span><br><span class="line">if(before&lt;next)&#123;</span><br><span class="line">return -1*ascORdescFlag;</span><br><span class="line">&#125;</span><br><span class="line">if(before&gt;next)&#123;</span><br><span class="line">return 1*ascORdescFlag;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">arr.sort(sortBy(&#39;age&#39;,22));</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;*</span><br><span class="line">[ &#123; name: &#39;z&#39;, age: 99 &#125;,</span><br><span class="line"> &#123; name: &#39;e&#39;, age: 78 &#125;,</span><br><span class="line"> &#123; name: &#39;p&#39;, age: 34 &#125;,</span><br><span class="line"> &#123; name: &#39;e&#39;, age: 33 &#125;,</span><br><span class="line"> &#123; name: &#39;g&#39;, age: 32 &#125;,</span><br><span class="line"> &#123; name: &#39;a&#39;, age: 23 &#125;,</span><br><span class="line"> &#123; name: &#39;j&#39;, age: 13 &#125;,</span><br><span class="line"> &#123; name: &#39;d&#39;, age: 2 &#125; ]</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">arr.sort(sortBy(&#39;name&#39;));</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;*</span><br><span class="line">[ &#123; name: &#39;a&#39;, age: 23 &#125;,</span><br><span class="line"> &#123; name: &#39;d&#39;, age: 2 &#125;,</span><br><span class="line"> &#123; name: &#39;e&#39;, age: 78 &#125;,</span><br><span class="line"> &#123; name: &#39;e&#39;, age: 33 &#125;,</span><br><span class="line"> &#123; name: &#39;g&#39;, age: 32 &#125;,</span><br><span class="line"> &#123; name: &#39;j&#39;, age: 13 &#125;,</span><br><span class="line"> &#123; name: &#39;p&#39;, age: 34 &#125;,</span><br><span class="line"> &#123; name: &#39;z&#39;, age: 99 &#125; ]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><blockquote><p>将指定的值 替换到 数组中的指定位置</p></blockquote><ul><li>value: 必填|填充的值</li><li>start: 可选|填充的起始位置</li><li>end: 可选|填充的结束位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [&#39;d&#39;,&#39;b&#39;,&#39;c&#39;,1,3];</span><br><span class="line">arr.fill(&#39;hello&#39;,3,5);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ &#39;d&#39;, &#39;b&#39;, &#39;c&#39;, &#39;hello&#39;, &#39;hello&#39; ] *&#x2F;</span><br><span class="line"></span><br><span class="line">arr.fill(&#39;world&#39;,2);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ &#39;d&#39;, &#39;b&#39;, &#39;world&#39;, &#39;world&#39;, &#39;world&#39; ] *&#x2F;</span><br><span class="line"></span><br><span class="line">arr.fill(&#39;hello world&#39;);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;*</span><br><span class="line">[ &#39;hello world&#39;,</span><br><span class="line"> &#39;hello world&#39;,</span><br><span class="line"> &#39;hello world&#39;,</span><br><span class="line"> &#39;hello world&#39;,</span><br><span class="line"> &#39;hello world&#39; ]</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="对数组本身无影响的方法"><a href="#对数组本身无影响的方法" class="headerlink" title="对数组本身无影响的方法"></a>对数组本身无影响的方法</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><blockquote><p>连接两个或多个数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,&#123;age:28&#125;,3],arrb&#x3D;[&#39;a&#39;,&#39;b&#39;],arrc &#x3D; [];</span><br><span class="line">arrc &#x3D; arrc.concat(arr,arrb);</span><br><span class="line">console.log(arrc);</span><br><span class="line">&#x2F;* [ 1, &#123; age: 28 &#125;, 3, &#39;a&#39;, &#39;b&#39; ] *&#x2F;</span><br><span class="line"></span><br><span class="line">arr[0] &#x3D; &#39;hello world&#39;;</span><br><span class="line">arr[1].age &#x3D; 18;</span><br><span class="line">console.log(arrc);</span><br><span class="line">&#x2F;*</span><br><span class="line">注意: 原数组中，引用类型的值修改会造成返回的新数组值修改 [引用的为同一地址]</span><br><span class="line">[ 1, &#123; age: 18 &#125;, 3, &#39;a&#39;, &#39;b&#39; ]</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote><p>将数组中得所有元素连接成字符串</p></blockquote><ul><li>separator 连接各元素的分隔符；若不指定，默认为逗号连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [-1,&#39;a&#39;,[&#39;b&#39;,&#39;c&#39;,[&#39;d&#39;,&#39;e&#39;]],&#39;123a&#39;];</span><br><span class="line">console.log(arr.join());</span><br><span class="line">&#x2F;* -1,a,b,c,d,e,123a *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arr.join(&#39;&#39;));</span><br><span class="line">&#x2F;* -1ab,c,d,e123a *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*打平嵌套数组</span><br><span class="line">* 注：处理后，如元素组中的元素 为String类型的数字，处理后为Number类型</span><br><span class="line">*&#x2F;</span><br><span class="line">function unwind(array)&#123;</span><br><span class="line">return array.join(&#39;,&#39;).split(&#39;,&#39;).map((item)&#x3D;&gt;&#123;return Number(item)?Number(item):item&#125;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(unwind(arr));</span><br><span class="line">&#x2F;* [ -1, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, 123 ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><blockquote><p>返回数组中指定的元素</p></blockquote><ul><li>start | [起始下标] -1 为数组最后的元素</li><li>end | [结束下标]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,&#39;b&#39;,&#123;c:&#39;hello&#39;&#125;,&#39;d&#39;];</span><br><span class="line">let arrb &#x3D; arr.slice(-1),arrc &#x3D; arr.slice();</span><br><span class="line">console.log(arrb);</span><br><span class="line">&#x2F;* [ &#39;d&#39; ] *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arrc);</span><br><span class="line">&#x2F;* [ 1, &#39;b&#39;, &#123; c: &#39;hello&#39; &#125;, &#39;d&#39; ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>返回一个新数组,新元素为 原元素调用函数处理后的值</p><ul><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,3,&#39;4&#39;,&#39;b&#39;,&#123;c:&#39;hello&#39;&#125;];</span><br><span class="line">let arrb &#x3D; arr.map(function(item)&#123;</span><br><span class="line">return item*2;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;* [ 1, 3, &#39;4&#39;, &#39;b&#39;, &#123; c: &#39;hello&#39; &#125; ] *&#x2F;</span><br><span class="line"></span><br><span class="line">console.log(arrb);</span><br><span class="line">&#x2F;* [ 2, 6, 8, NaN, NaN ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote><p>遍历数组的每个元素，并将元素传递给回调函数</p><ul><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">*数组去重</span><br><span class="line">*此方法仅可用于基础类型的值 去重，引用类型无法去除</span><br><span class="line">*&#x2F;</span><br><span class="line">function uniq(array)&#123;</span><br><span class="line">let returnArr &#x3D; [],tmpMap &#x3D; &#123;&#125;;</span><br><span class="line">array.forEach((item)&#x3D;&gt;&#123;</span><br><span class="line">if(!tmpMap[item])&#123;</span><br><span class="line">returnArr.push(item);</span><br><span class="line">tmpMap[item] &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">return returnArr;</span><br><span class="line">&#125;</span><br><span class="line">let testArr &#x3D; [1,1,2,2,2,3,3,3,3,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#123;d:&#39;123&#39;&#125;,&#123;d:&#39;456&#39;&#125;];</span><br><span class="line">console.log(uniq(testArr));</span><br><span class="line">&#x2F;* [ 1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#123; d: &#39;123&#39; &#125; ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote><p>返回一个新数组，新数组中的元素为符合判断条件的元素</p><ul><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 数组去重</span><br><span class="line">*此方法仅可用于基础类型的值 去重，引用类型无法去除</span><br><span class="line">*&#x2F;</span><br><span class="line">let testArr &#x3D; [1,1,2,2,2,3,3,3,3,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];</span><br><span class="line">let reArr &#x3D; testArr.filter((item,i,arr)&#x3D;&gt;&#123;</span><br><span class="line">return arr.indexOf(item)&#x3D;&#x3D;&#x3D;i;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">&#x2F;* [ 1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>返回符合条件的 第一个值</p><ul><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr &#x3D; [&#123;age:11&#125;,&#123;age:22&#125;,&#123;age:33&#125;];</span><br><span class="line">let reArr &#x3D; testArr.find((item,i,arr)&#x3D;&gt;&#123;</span><br><span class="line">return item.age&gt;15;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">&#x2F;* &#123; age: 22 &#125; *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><blockquote><p>返回符合条件的 第一个值的下标索引</p><ul><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr &#x3D; [&#123;age:11&#125;,&#123;age:22&#125;,&#123;age:33&#125;];</span><br><span class="line">let reArr &#x3D; testArr.findIndex((item,i,arr)&#x3D;&gt;&#123;</span><br><span class="line">return item.age&gt;15;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">&#x2F;* 1 *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><blockquote><p>返回指定元素值的第一个下标索引</p></blockquote><ul><li>item | 待检索的值</li><li>start | 检索的起始位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 数组去重</span><br><span class="line">*此方法仅可用于基础类型的值 去重，引用类型无法去除</span><br><span class="line">*&#x2F;</span><br><span class="line">let testArr &#x3D; [1,1,2,2,2,3,3,3,3,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];</span><br><span class="line">let reArr &#x3D; testArr.filter((item,i,arr)&#x3D;&gt;&#123;</span><br><span class="line">return arr.indexOf(item)&#x3D;&#x3D;&#x3D;i;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">&#x2F;* [ 1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ] *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><blockquote><p>返回指定元素值的第一个下标索引</p></blockquote><ul><li>item | 待检索的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let testArr &#x3D; [1,1,2,2,2,3,3,3,3,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];</span><br><span class="line">console.log(testArr.lastIndexOf(&#39;a&#39;));</span><br><span class="line">&#x2F;* 10 *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><blockquote><p>检测数组中是否包含指定元素，有则 true | 否则 false</p></blockquote><ul><li>item | 待检测的值</li><li>start | 检索的起始位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let testArr &#x3D; [11,22,33];</span><br><span class="line">console.log(testArr.includes(22));</span><br><span class="line">&#x2F;* true *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><blockquote><p>检测是否数组中的元素都符合指定的条件，都符合则返回 true | 一旦有一个不符合返回 false</p><ul><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr &#x3D; [&#123;age:11&#125;,&#123;age:22&#125;,&#123;age:33&#125;];</span><br><span class="line">let reArr &#x3D; testArr.every((item,i,arr)&#x3D;&gt;&#123;</span><br><span class="line">return item.age&gt;15;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">&#x2F;* false *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><blockquote><p>检测数组中是否有一个满足条件的元素，只要有一个则返回 true | 一个都没有则返回 false</p><ul><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr &#x3D; [&#123;age:11&#125;,&#123;age:22&#125;,&#123;age:33&#125;];</span><br><span class="line">let reArr &#x3D; testArr.some((item,i,arr)&#x3D;&gt;&#123;</span><br><span class="line">return item.age&gt;15;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(reArr);</span><br><span class="line">&#x2F;* true *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote><p>将数组中的每个值从左到右开始缩减，经函数处理后，最终返回一个值</p></blockquote><ul><li>function<ul><li>total 初始值, 或者计算结束后的返回值 | 必须</li><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></li><li>可选。传递给函数的初始值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*打平嵌套数组</span><br><span class="line">* 使用条件仅为 待打平的数组为 二维数组</span><br><span class="line">*&#x2F;</span><br><span class="line">let testArr &#x3D; [1,[&#39;a&#39;,&#39;c&#39;],3];</span><br><span class="line">console.log(testArr.reduce((r,item)&#x3D;&gt;r.concat(item),[]));</span><br><span class="line">&#x2F;* [ 1, &#39;a&#39;, &#39;c&#39;, 3 ] *&#x2F;</span><br><span class="line">&#x2F;* 注：不提供默认值时：初始的默认值为 首位元素的值*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h3><blockquote><p>将数组中的每个值从右到左开始缩减，经函数处理后，最终返回一个值</p></blockquote><ul><li>function<ul><li>total 初始值, 或者计算结束后的返回值 | 必须</li><li>currentValue： 当前值[原数组] | 必须</li><li>index： 当前值的下标索引 | 可选</li><li>arr： 原数组对象 | 可选</li></ul></li><li>可选。传递给函数的初始值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let testArr &#x3D; [1,2,3,4,5,6];</span><br><span class="line">console.log(testArr.reduce((total,item)&#x3D;&gt;&#123;</span><br><span class="line">return total-item;</span><br><span class="line">&#125;));</span><br><span class="line">&#x2F;* 注：不提供默认值时：初始的默认值为 末位元素的值*&#x2F;</span><br><span class="line">&#x2F;* -19 *&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSSLint-目录</title>
      <link href="/blog/2018/04/25/CSSLint-%E7%9B%AE%E5%BD%95/"/>
      <url>/blog/2018/04/25/CSSLint-%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="csslint-语法建议规则"><a href="#csslint-语法建议规则" class="headerlink" title="csslint 语法建议规则"></a>csslint 语法建议规则</h1><blockquote><p>规则 根据字母升序排列</p></blockquote><ul><li><a href="#">Post not found: adjoining-classes adjoining-classes</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-adjoining-classes)</li><li><a href="#">Post not found: box-model box-model</a> [原址](https://github.com/CSSLint/csslint/wiki/Beware-of-box-model-size)</li><li><a href="#">Post not found: box-sizing box-sizing</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-box-sizing)</li><li><a href="#">Post not found: bulletproof-font-face bulletproof-font-face</a> [原址](https://github.com/CSSLint/csslint/wiki/Bulletproof-font-face)</li><li><a href="#">Post not found: compatible-vendor-prefixes compatible-vendor-prefixes</a> [原址](https://github.com/CSSLint/csslint/wiki/Require-compatible-vendor-prefixes)</li><li><a href="#">Post not found: empty-rules empty-rules</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-empty-rules)</li><li><a href="#">Post not found: display-property-grouping display-property-grouping</a> [原址](https://github.com/CSSLint/csslint/wiki/Require-properties-appropriate-for-display)</li><li><a href="#">Post not found: duplicate-background-images duplicate-background-images</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-background-images)</li><li><a href="#">Post not found: duplicate-properties duplicate-properties</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-properties)</li><li><a href="#">Post not found: fallback-colors fallback-colors</a> [原址](https://github.com/CSSLint/csslint/wiki/Require-fallback-colors)</li><li><a href="#">Post not found: floats floats</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-too-many-floats)</li><li><a href="#">Post not found: font-faces font-faces</a> [原址](https://github.com/CSSLint/csslint/wiki/Don%27t-use-too-many-web-fonts)</li><li><a href="#">Post not found: font-sizes font-sizes</a> [原址](https://github.com/CSSLint/csslint/wiki/Don%27t-use-too-many-font-size-declarations)</li><li><a href="#">Post not found: gradients gradients</a> [原址](https://github.com/CSSLint/csslint/wiki/Require-all-gradient-definitions)</li><li><a href="#">Post not found: ids ids</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-IDs-in-selectors)</li><li><a href="#">Post not found: import import</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-%40import)</li><li><a href="#">Post not found: important important</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-%21important)</li><li><a href="#">Post not found: known-properties known-properties</a> [原址](https://github.com/CSSLint/csslint/wiki/Require-use-of-known-properties)</li><li><a href="#">Post not found: outline-none outline-none</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-outline%3Anone)</li><li><a href="#">Post not found: overqualified-elements overqualified-elements</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-overqualified-elements)</li><li><a href="#">Post not found: qualified-headings qualified-headings</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-qualified-headings)</li><li><a href="#">Post not found: regex-selectors regex-selectors</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-selectors-that-look-like-regular-expressions)</li><li><a href="#">Post not found: shorthand shorthand</a> [原址](https://github.com/CSSLint/csslint/wiki/Require-shorthand-properties)</li><li><a href="#">Post not found: star-property-hack star-property-hack</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-star-hack)</li><li><a href="#">Post not found: text-indent text-indent</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-negative-text-indent)</li><li><a href="#">Post not found: underscore-property-hack underscore-property-hack</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-underscore-hack)</li><li><a href="#">Post not found: unique-headings unique-headings</a> [原址](https://github.com/CSSLint/csslint/wiki/Headings-should-only-be-defined-once)</li><li><a href="#">Post not found: universal-selector universal-selector</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-universal-selector)</li><li><a href="#">Post not found: unqualified-attributes unqualified-attributes</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-unqualified-attribute-selectors)</li><li><a href="#">Post not found: vendor-prefix vendor-prefix</a> [原址](https://github.com/CSSLint/csslint/wiki/Require-standard-property-with-vendor-prefix)</li><li><a href="#">Post not found: zero-units zero-units</a> [原址](https://github.com/CSSLint/csslint/wiki/Disallow-units-for-zero-values)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 译文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 目录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
